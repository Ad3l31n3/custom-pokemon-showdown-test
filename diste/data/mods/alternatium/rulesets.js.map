{
  "version": 3,
  "sources": ["../../../../data/mods/alternatium/rulesets.ts"],
  "sourcesContent": ["// Note: These are the rules that formats use\n// The list of formats is stored in config/formats.js\nexport const Rulesets: {[k: string]: FormatData} = {\n\t// Allows various formes of the same pokemon to show up properly on the same team in team preview\n\tteampreview: {\n\t\teffectType: 'Rule',\n\t\tname: 'Team Preview',\n\t\tdesc: \"Allows each player to see the Pok&eacute;mon on their opponent's team before they choose their lead Pok&eacute;mon\",\n\t\tonBegin() {\n\t\t\tthis.add('clearpoke');\n\t\t\tfor (const pokemon of this.getAllPokemon()) {\n\t\t\t\tconst details = pokemon.details.replace(', shiny', '')\n\t\t\t\t\t.replace(/(Pumpkaboo)(-[a-zA-Z?-]+)?/g, '$1-*');\n\t\t\t\tthis.add('poke', pokemon.side.id, details, '');\n\t\t\t}\n\t\t},\n\t\tonTeamPreview() {\n\t\t\tthis.makeRequest('teampreview');\n\t\t},\n\t},\n\t// Shows the stats, abilities, and typing of pokemon when they switch in, because the client won't show that properly\n\tdatamod: {\n\t\teffectType: 'Rule',\n\t\tname: 'Data Mod',\n\t\tdesc: 'When a new Pok\u00E9mon switches in for the first time, information about its types, stats and Abilities is displayed to both players.',\n\t\tonBegin() {\n\t\t\tfor (const pokemon of this.getAllPokemon()) {\n\t\t\t\tconst species = this.dex.species.get(pokemon.species.name);\n\t\t\t\tconst baseSpecies = this.dex.mod('gen8').species.get(pokemon.species.name);\n\t\t\t\tlet modded = false;\n\t\t\t\tfor (const type of [0, 1]) {\n\t\t\t\t\tif (species.types[type] !== baseSpecies.types[type]) {\n\t\t\t\t\t\tmodded = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (Object.values(species.baseStats).join('/') !== Object.values(baseSpecies.baseStats).join('/')) {\n\t\t\t\t\tmodded = true;\n\t\t\t\t}\n\t\t\t\tfor (const i of ['0', '1', 'H', 'S'] as ('0' | '1' | 'H' | 'S')[]) {\n\t\t\t\t\tif (species.abilities[i] !== baseSpecies.abilities[i]) {\n\t\t\t\t\t\tmodded = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (modded) {\n\t\t\t\t\tpokemon.m.isModded = true;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonSwitchIn(pokemon) {\n\t\t\tlet species = pokemon.species;\n\t\t\tif (pokemon.illusion) {\n\t\t\t\tspecies = pokemon.illusion.species;\n\t\t\t\tif (!pokemon.illusion.m.isModded) return;\n\t\t\t\tthis.add('-start', pokemon, 'typechange', pokemon.illusion.getTypes(true).join('/'), '[silent]');\n\t\t\t\tif (pokemon.illusion.m.switchedIn) return;\n\t\t\t\tpokemon.illusion.m.switchedIn = true;\n\t\t\t} else {\n\t\t\t\tif (!pokemon.m.isModded) return;\n\t\t\t\tthis.add('-start', pokemon, 'typechange', pokemon.getTypes(true).join('/'), '[silent]');\n\t\t\t\tif (pokemon.m.switchedIn) return;\n\t\t\t\tpokemon.m.switchedIn = true;\n\t\t\t}\n\t\t\tconst abilities = Object.values(species.abilities).join(' / ');\n\t\t\tconst baseStats = species.baseStats;\n\t\t\tconst type = species.types[0];\n\t\t\tif (species.types[1]) {\n\t\t\t\tconst type2 = species.types[1];\n\t\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col pokemonnamecol\" style=\"white-space: nowrap\">` + species.name + `</span> <span class=\"col typecol\"><img src=\"https://raw.githubusercontent.com/Poilerwags/Sprites/master/play.pokemonshowdown.com/sprites/types/${type}.png\" alt=\"${type}\" height=\"14\" width=\"32\"><img src=\"https://raw.githubusercontent.com/Poilerwags/Sprites/master/play.pokemonshowdown.com/sprites/types/${type2}.png\" alt=\"${type2}\" height=\"14\" width=\"32\"></span> <span style=\"float: left ; min-height: 26px\"><span class=\"col abilitycol\">` + abilities + `</span><span class=\"col abilitycol\"></span></span></li><li style=\"clear: both\"></li></ul>`);\n\t\t\t} else {\n\t\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col pokemonnamecol\" style=\"white-space: nowrap\">` + species.name + `</span> <span class=\"col typecol\"><img src=\"https://raw.githubusercontent.com/Poilerwags/Sprites/master/play.pokemonshowdown.com/sprites/types/${type}.png\" alt=\"${type}\" height=\"14\" width=\"32\"></span> <span style=\"float: left ; min-height: 26px\"><span class=\"col abilitycol\">` + abilities + `</span><span class=\"col abilitycol\"></span></span></li><li style=\"clear: both\"></li></ul>`);\n\t\t\t}\n\t\t\tthis.add(`raw|<ul class=\"utilichart\"><li class=\"result\"><span style=\"float: left ; min-height: 26px\"><span class=\"col statcol\"><em>HP</em><br>` + baseStats.hp + `</span> <span class=\"col statcol\"><em>Atk</em><br>` + baseStats.atk + `</span> <span class=\"col statcol\"><em>Def</em><br>` + baseStats.def + `</span> <span class=\"col statcol\"><em>SpA</em><br>` + baseStats.spa + `</span> <span class=\"col statcol\"><em>SpD</em><br>` + baseStats.spd + `</span> <span class=\"col statcol\"><em>Spe</em><br>` + baseStats.spe + `</span> </span></li><li style=\"clear: both\"></li></ul>`);\n\t\t},\n\t\tonDamagingHit(damage, target, source, move) {\n\t\t\tif (target.hasAbility('illusion')) { // making sure the correct information is given when an Illusion breaks\n\t\t\t\tif (target.m.isModded) {\n\t\t\t\t\tthis.add('-start', target, 'typechange', target.getTypes(true).join('/'), '[silent]');\n\t\t\t\t\tif (!target.m.switchedIn) {\n\t\t\t\t\t\ttarget.m.switchedIn = true;\n\t\t\t\t\t\tconst species = target.species;\n\t\t\t\t\t\tconst abilities = Object.values(species.abilities).join(' / ');\n\t\t\t\t\t\tconst baseStats = species.baseStats;\n\t\t\t\t\t\tconst type = species.types[0];\n\t\t\t\t\t\tconst type2 = species.types[1];\n\t\t\t\t\t\tthis.add(\n\t\t\t\t\t\t\t`raw|<ul class=\"utilichart\"><li class=\"result\"><span class=\"col pokemonnamecol\" style=\"white-space: nowrap\">${species.name}</span> ` +\n\t\t\t\t\t\t\t`<span class=\"col typecol\"><psicon type=\"${type}\" />${type2 ? `<psicon type=\"${type2}\" />` : ''}</span> ` +\n\t\t\t\t\t\t\t`<span style=\"float: left ; min-height: 26px\"><span class=\"col abilitycol\">${abilities}</span><span class=\"col abilitycol\"></span>` +\n\t\t\t\t\t\t\t`</span></li><li style=\"clear: both\"></li></ul>`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.add(\n\t\t\t\t\t\t\t`raw|<ul class=\"utilichart\"><li class=\"result\"><span style=\"float: left ; min-height: 26px\"><span class=\"col statcol\"><em>HP</em><br>` +\n\t\t\t\t\t\t\t`${baseStats.hp}</span> <span class=\"col statcol\"><em>Atk</em><br>${baseStats.atk}</span> <span class=\"col statcol\"><em>Def</em><br>` +\n\t\t\t\t\t\t\t`${baseStats.def}</span> <span class=\"col statcol\"><em>SpA</em><br>${baseStats.spa}</span> <span class=\"col statcol\"><em>SpD</em><br>` +\n\t\t\t\t\t\t\t`${baseStats.spd}</span> <span class=\"col statcol\"><em>Spe</em><br>${baseStats.spe}</span> </span></li><li style=\"clear: both\"></li></ul>`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst types = target.baseSpecies.types;\n\t\t\t\t\tif (target.getTypes().join() === types.join()) {\n\t\t\t\t\t\tthis.add('-end', target, 'typechange', '[silent]');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t},\n};\n"],
  "mappings": "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",
  "names": []
}
