{
  "version": 3,
  "sources": ["../../../../data/mods/copedraft/random-teams.ts"],
  "sourcesContent": ["import {toID} from '../../../sim/dex';\nimport {PRNG, PRNGSeed} from '../../../sim/prng';\nimport RandomCloverTeams, {RandomBattleSets} from '../clover/random-teams';\n\nexport class RandomCapTeams extends RandomCloverTeams {\n\tconstructor(format: Format | string, prng: PRNG | PRNGSeed | null) {\n\t\tsuper(format, prng);\n\t}\n\n\trandomSets: RandomBattleSets = require('./random-sets.json');\n\n\trandomTeam() {\n\t\tconst seed = this.prng.seed;\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\n\n\t\t// For Monotype\n\t\tconst isMonotype = ruleTable.has('sametypeclause');\n\t\tconst typePool = Object.keys(this.dex.data.TypeChart);\n\t\tconst type = this.sample(typePool);\n\n\t\t// PotD stuff\n\t\tlet potd: Species | false = false;\n\t\tif (global.Config && Config.potd && ruleTable.has('potd')) {\n\t\t\tpotd = this.dex.species.get(Config.potd);\n\t\t}\n\n\t\tconst baseFormes: {[k: string]: number} = {};\n\n\t\tconst tierCount: {[k: string]: number} = {};\n\t\tconst typeCount: {[k: string]: number} = {};\n\t\tconst typeComboCount: {[k: string]: number} = {};\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\n\n\t\tconst pokemonPool = this.getPokemonPool(type, pokemon, isMonotype, true);\n\t\twhile (pokemonPool.length && pokemon.length < this.maxTeamSize) {\n\t\t\tlet species = this.dex.species.get(this.sampleNoReplace(pokemonPool));\n\t\t\tif (!species.exists) continue;\n\t\t\tif (pokemon.length === 0 && this.noLead.includes(toID(species.name))) continue;\n\t\t\tif (!this.randomSets[toID(species.name)]) continue;\n\n\t\t\t// Check if the forme has moves for random battle\n\t\t\tif ((this.format.gameType === 'singles') || (this.format.gameType === 'freeforall') || (this.format.gameType === 'multi')) {\n\t\t\t\tif (!species.randomBattleMoves && !this.randomSets[toID(species.name)]) continue;\n\t\t\t} else {\n\t\t\t\tif (!species.randomDoubleBattleMoves && !this.randomSets[toID(species.name)]) continue;\n\t\t\t}\n\n\t\t\t// Limit to one of each species (Species Clause)\n\t\t\tif (baseFormes[species.name]) continue;\n\n\t\t\t// Adjust rate for species with multiple sets\n\t\t\tswitch (species.baseSpecies) {\n\t\t\tcase 'Arceus': case 'Silvally':\n\t\t\t\tif (this.randomChance(8, 9) && !isMonotype) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Aegislash': case 'Basculin': case 'Gourgeist': case 'Meloetta':\n\t\t\t\tif (this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Greninja':\n\t\t\t\tif (this.gen >= 7 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Darmanitan':\n\t\t\t\tif (species.gen === 8 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Magearna': case 'Toxtricity': case 'Zacian': case 'Zamazenta': case 'Zarude':\n\t\t\tcase 'Appletun': case 'Blastoise': case 'Butterfree': case 'Copperajah': case 'Grimmsnarl': case 'Inteleon': case 'Rillaboom': case 'Snorlax': case 'Urshifu':\n\t\t\t\tif (this.gen >= 8 && this.randomChance(1, 2)) continue;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Illusion shouldn't be on the last slot\n\t\t\tif (species.name === 'Zoroark' && pokemon.length > 4) continue;\n\n\t\t\tconst tier = species.tier;\n\t\t\tconst types = species.types;\n\t\t\tconst typeCombo = types.slice().sort().join();\n\n\t\t\t// Limit one Pokemon per tier, two for Monotype\n\t\t\t// if ((tierCount[tier] >= (isMonotype ? 2 : 1)) && !this.randomChance(1, Math.pow(5, tierCount[tier]))) {\n\t\t\t// \tcontinue;\n\t\t\t// }\n\n\t\t\tif (!isMonotype) {\n\t\t\t\t// Limit two of any type\n\t\t\t\tlet skip = false;\n\t\t\t\tfor (const typeName of types) {\n\t\t\t\t\tif (typeCount[typeName] > 1) {\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// TODO: RE-ENABLE THIS\n\t\t\t\t// if (skip) continue;\n\t\t\t}\n\n\t\t\t// Limit one of any type combination, two in Monotype\n\t\t\tif (typeComboCount[typeCombo] >= (isMonotype ? 2 : 1)) continue;\n\n\t\t\t// The Pokemon of the Day\n\t\t\tif (!!potd && potd.exists && pokemon.length === 1) species = potd;\n\n\t\t\tconst set = this.randomSet(species, teamDetails, pokemon.length === 0, !['singles', 'freeforall'].includes(this.format.gameType), false);\n\n\t\t\t// Okay, the set passes, add it to our team\n\t\t\tpokemon.push(set);\n\n\t\t\tif (pokemon.length === this.maxTeamSize) {\n\t\t\t\t// Set Zoroark's level to be the same as the last Pokemon\n\t\t\t\tconst illusion = teamDetails['illusion'];\n\t\t\t\tif (illusion) pokemon[illusion - 1].level = pokemon[5].level;\n\n\t\t\t\t// Don't bother tracking details for the 6th Pokemon\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\n\t\t\tbaseFormes[species.baseSpecies] = 1;\n\n\t\t\t// Increment tier counter\n\t\t\tif (tierCount[tier]) {\n\t\t\t\ttierCount[tier]++;\n\t\t\t} else {\n\t\t\t\ttierCount[tier] = 1;\n\t\t\t}\n\n\t\t\t// Increment type counters\n\t\t\tfor (const typeName of types) {\n\t\t\t\tif (typeName in typeCount) {\n\t\t\t\t\ttypeCount[typeName]++;\n\t\t\t\t} else {\n\t\t\t\t\ttypeCount[typeName] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeCombo in typeComboCount) {\n\t\t\t\ttypeComboCount[typeCombo]++;\n\t\t\t} else {\n\t\t\t\ttypeComboCount[typeCombo] = 1;\n\t\t\t}\n\n\t\t\t// Track what the team has\n\t\t\tif (set.ability === 'Drizzle' || set.moves.includes('raindance')) teamDetails['rain'] = 1;\n\t\t\tif (set.ability === 'Drought' || set.moves.includes('sunnyday')) teamDetails['sun'] = 1;\n\t\t\tif (set.ability === 'Sand Stream') teamDetails['sand'] = 1;\n\t\t\tif (set.ability === 'Snow Warning') teamDetails['hail'] = 1;\n\t\t\tif (set.moves.includes('spikes')) teamDetails['spikes'] = (teamDetails['spikes'] || 0) + 1;\n\t\t\tif (set.moves.includes('stealthrock')) teamDetails['stealthRock'] = 1;\n\t\t\tif (set.moves.includes('stickyweb')) teamDetails['stickyWeb'] = 1;\n\t\t\tif (set.moves.includes('toxicspikes')) teamDetails['toxicSpikes'] = 1;\n\t\t\tif (set.moves.includes('defog')) teamDetails['defog'] = 1;\n\t\t\tif (set.moves.includes('rapidspin')) teamDetails['rapidSpin'] = 1;\n\t\t\tif (set.moves.includes('auroraveil') || set.moves.includes('reflect') && set.moves.includes('lightscreen')) teamDetails['screens'] = 1;\n\n\t\t\t// For setting Zoroark's level\n\t\t\tif (set.ability === 'Illusion') teamDetails['illusion'] = pokemon.length;\n\t\t}\n\t\tif (pokemon.length < this.maxTeamSize) throw new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\n\n\t\treturn pokemon;\n\t}\n}\n\nexport default RandomCapTeams;\n"],
  "mappings": "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",
  "names": ["RandomCloverTeams"]
}
