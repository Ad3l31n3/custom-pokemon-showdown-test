{
  "version": 3,
  "sources": ["../../../../data/mods/clover/scripts.ts"],
  "sourcesContent": ["export const Scripts: ModdedBattleScriptsData = {\n\tgen: 9,\n\tinherit: 'gen8',\n\tboost(boost: SparseBoostsTable, target: Pokemon, source?: Pokemon | null,\n\t\teffect?: Effect | string | null, isSecondary?: boolean, isSelf?: boolean) {\n\t\tif (this.event) {\n\t\t\tif (!target) target = this.event.target;\n\t\t\tif (!source) source = this.event.source;\n\t\t\tif (!effect) effect = this.effect;\n\t\t}\n\t\tif (typeof effect === 'string') effect = this.dex.conditions.get(effect);\n\t\tif (!target?.hp) return 0;\n\t\tif (!target.isActive) return false;\n\t\tif (this.gen > 5 && !target.side.foePokemonLeft()) return false;\n\t\tboost = this.runEvent('ChangeBoost', target, source, effect, {...boost});\n\t\tboost = target.getCappedBoost(boost);\n\t\tboost = this.runEvent('TryBoost', target, source, effect, {...boost});\n\t\tlet success = null;\n\t\tlet boosted = isSecondary;\n\t\tlet boostName: BoostID;\n\t\tfor (boostName in boost) {\n\t\t\tconst currentBoost: SparseBoostsTable = {\n\t\t\t\t[boostName]: boost[boostName],\n\t\t\t};\n\t\t\tlet boostBy = target.boostBy(currentBoost);\n\t\t\tlet msg = '-boost';\n\t\t\tif (boost[boostName]! < 0 || target.boosts[boostName] === -6) {\n\t\t\t\tmsg = '-unboost';\n\t\t\t\tboostBy = -boostBy;\n\t\t\t}\n\t\t\tif (boostBy) {\n\t\t\t\tsuccess = true;\n\t\t\t\tswitch (effect?.id) {\n\t\t\t\tcase 'bellydrum': case 'angerpoint':\n\t\t\t\t\tthis.add('-setboost', target, 'atk', target.boosts['atk'], '[from] ' + effect.fullname);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'bellydrum2':\n\t\t\t\t\tthis.add(msg, target, boostName, boostBy, '[silent]');\n\t\t\t\t\tthis.hint(\"In Gen 2, Belly Drum boosts by 2 when it fails.\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'zpower':\n\t\t\t\t\tthis.add(msg, target, boostName, boostBy, '[zeffect]');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'artificial':\n\t\t\t\t\tthis.addSplit(target.side.id, [msg, target, boostName, boostBy]);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif (!effect) break;\n\t\t\t\t\tif (effect.effectType === 'Move') {\n\t\t\t\t\t\tthis.add(msg, target, boostName, boostBy);\n\t\t\t\t\t} else if (effect.effectType === 'Item') {\n\t\t\t\t\t\tthis.add(msg, target, boostName, boostBy, '[from] item: ' + effect.name);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (effect.effectType === 'Ability' && !boosted) {\n\t\t\t\t\t\t\tthis.add('-ability', target, effect.name, 'boost');\n\t\t\t\t\t\t\tboosted = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.add(msg, target, boostName, boostBy);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.runEvent('AfterEachBoost', target, source, effect, currentBoost);\n\t\t\t} else if (effect?.effectType === 'Ability') {\n\t\t\t\tif (isSecondary || isSelf) this.add(msg, target, boostName, boostBy);\n\t\t\t} else if (!isSecondary && !isSelf) {\n\t\t\t\tthis.add(msg, target, boostName, boostBy);\n\t\t\t}\n\t\t}\n\t\tthis.runEvent('AfterBoost', target, source, effect, boost);\n\t\tif (success) {\n\t\t\tif (Object.values(boost).some(x => x > 0)) target.statsRaisedThisTurn = true;\n\t\t\tif (Object.values(boost).some(x => x < 0)) target.statsLoweredThisTurn = true;\n\t\t}\n\t\treturn success;\n\t},\n\tactions: {\n\t\tinherit: true,\n\t\tmodifyDamage(\n\t\t\tbaseDamage: number, pokemon: Pokemon, target: Pokemon, move: ActiveMove, suppressMessages = false\n\t\t) {\n\t\t\tconst tr = this.battle.trunc;\n\t\t\tif (!move.type) move.type = '???';\n\t\t\tconst type = move.type;\n\n\t\t\tbaseDamage += 2;\n\n\t\t\tif (move.spreadHit) {\n\t\t\t\t// multi-target modifier (doubles only)\n\t\t\t\tconst spreadModifier = move.spreadModifier || (this.battle.gameType === 'freeforall' ? 0.5 : 0.75);\n\t\t\t\tthis.battle.debug('Spread modifier: ' + spreadModifier);\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, spreadModifier);\n\t\t\t} else if (move.multihitType === 'parentalbond' && move.hit > 1) {\n\t\t\t\t// Parental Bond modifier\n\t\t\t\tconst bondModifier = this.battle.gen > 6 ? 0.25 : 0.5;\n\t\t\t\tthis.battle.debug(`Parental Bond modifier: ${bondModifier}`);\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, bondModifier);\n\t\t\t}\n\n\t\t\t// weather modifier\n\t\t\tbaseDamage = this.battle.runEvent('WeatherModifyDamage', pokemon, target, move, baseDamage);\n\n\t\t\t// crit - not a modifier\n\t\t\tconst isCrit = target.getMoveHitData(move).crit;\n\t\t\tif (isCrit) {\n\t\t\t\tbaseDamage = tr(baseDamage * (move.critModifier || (this.battle.gen >= 6 ? 1.5 : 2)));\n\t\t\t}\n\n\t\t\t// random factor - also not a modifier\n\t\t\tbaseDamage = this.battle.randomizer(baseDamage);\n\n\t\t\tconst matchingTypeCount = pokemon.types.filter((pokemonType) => pokemonType === type).length;\n\t\t\t// STAB\n\t\t\tif (move.forceSTAB || pokemon.hasType(type)) {\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, move.stab || Math.pow(1.5, Math.max(matchingTypeCount, 1)));\n\t\t\t}\n\t\t\t// types\n\t\t\tlet typeMod = target.runEffectiveness(move);\n\t\t\ttypeMod = this.battle.clampIntRange(typeMod, -6, 6);\n\t\t\ttarget.getMoveHitData(move).typeMod = typeMod;\n\t\t\tif (typeMod > 0) {\n\t\t\t\tif (!suppressMessages) this.battle.add('-supereffective', target);\n\n\t\t\t\tfor (let i = 0; i < typeMod; i++) {\n\t\t\t\t\tbaseDamage *= 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeMod < 0) {\n\t\t\t\tif (!suppressMessages) this.battle.add('-resisted', target);\n\n\t\t\t\tfor (let i = 0; i > typeMod; i--) {\n\t\t\t\t\tbaseDamage = tr(baseDamage / 2);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isCrit && !suppressMessages) this.battle.add('-crit', target);\n\n\t\t\tif (pokemon.status === 'brn' && move.category === 'Physical' && !pokemon.hasAbility('guts')) {\n\t\t\t\tif (this.battle.gen < 6 || move.id !== 'facade') {\n\t\t\t\t\tbaseDamage = this.battle.modify(baseDamage, 0.5);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Generation 5, but nothing later, sets damage to 1 before the final damage modifiers\n\t\t\tif (this.battle.gen === 5 && !baseDamage) baseDamage = 1;\n\n\t\t\t// Final modifier. Modifiers that modify damage after min damage check, such as Life Orb.\n\t\t\tbaseDamage = this.battle.runEvent('ModifyDamage', pokemon, target, move, baseDamage);\n\n\t\t\tif (move.isZOrMaxPowered && target.getMoveHitData(move).zBrokeProtect) {\n\t\t\t\tbaseDamage = this.battle.modify(baseDamage, 0.25);\n\t\t\t\tthis.battle.add('-zbroken', target);\n\t\t\t}\n\n\t\t\t// Generation 6-7 moves the check for minimum 1 damage after the final modifier...\n\t\t\tif (this.battle.gen !== 5 && !baseDamage) return 1;\n\n\t\t\t// ...but 16-bit truncation happens even later, and can truncate to 0\n\t\t\treturn tr(baseDamage, 16);\n\t\t},\n\t\tcanUltraBurst(pokemon: Pokemon) {\n\t\t\tif (['Necrozma-Dawn-Wings', 'Necrozma-Dusk-Mane'].includes(pokemon.baseSpecies.name) &&\n\t\t\t\tpokemon.getItem().id === 'ultranecroziumz') {\n\t\t\t\treturn \"Necrozma-Ultra\";\n\t\t\t}\n\t\t\tif (pokemon.baseSpecies.name === 'Blobbos' && pokemon.getItem().id === 'ultrablobbosiumz') {\n\t\t\t\treturn \"Blobbos-Ultra\";\n\t\t\t}\n\t\t\tif (pokemon.baseSpecies.name === 'Fucker' && pokemon.getItem().id === 'ultrafuckiumz') {\n\t\t\t\treturn \"Fucker-Ultra\";\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tcanMegaEvo(pokemon: Pokemon) {\n\t\t\tconst species = pokemon.baseSpecies;\n\t\t\tconst altForme = species.otherFormes && this.dex.species.get(species.otherFormes[0]);\n\t\t\tconst item = pokemon.getItem();\n\t\t\t// Mega Rayquaza\n\t\t\tif (altForme?.isMega && altForme?.requiredMove &&\n\t\t\t\tpokemon.baseMoves.includes(this.dex.toID(altForme.requiredMove)) && !item.zMove) {\n\t\t\t\treturn altForme.name;\n\t\t\t}\n\t\t\t// a hacked-in Megazard X can mega evolve into Megazard Y, but not into Megazard X\n\t\t\tif (item.megaEvolves === species.baseSpecies && item.megaStone !== species.name) {\n\t\t\t\treturn item.megaStone;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\thitStepTryImmunity(targets: Pokemon[], pokemon: Pokemon, move: ActiveMove) {\n\t\t\tconst hitResults = [];\n\t\t\tfor (const [i, target] of targets.entries()) {\n\t\t\t\tif (this.battle.gen >= 6 && move.flags['powder'] && target !== pokemon && !this.dex.getImmunity('powder', target)) {\n\t\t\t\t\tthis.battle.debug('natural powder immunity');\n\t\t\t\t\tthis.battle.add('-immune', target);\n\t\t\t\t\thitResults[i] = move.canContinue || false;\n\t\t\t\t} else if (!this.battle.singleEvent('TryImmunity', move, {}, target, pokemon, move)) {\n\t\t\t\t\tthis.battle.add('-immune', target);\n\t\t\t\t\thitResults[i] = move.canContinue || false;\n\t\t\t\t} else if (this.battle.gen >= 7 && move.pranksterBoosted && pokemon.hasAbility('prankster') &&\n\t\t\t\t\t!targets[i].isAlly(pokemon) && !this.dex.getImmunity('prankster', target)) {\n\t\t\t\t\tthis.battle.debug('natural prankster immunity');\n\t\t\t\t\tif (!target.illusion) this.battle.hint(\"Since gen 7, Dark is immune to Prankster moves.\");\n\t\t\t\t\tthis.battle.add('-immune', target);\n\t\t\t\t\thitResults[i] = move.canContinue || false;\n\t\t\t\t} else if (move.pranksterBoosted && pokemon.hasAbility('prankster') &&\n\t\t\t\t\t!targets[i].isAlly(pokemon) && target.hasAbility('boardpowers4s')) {\n\t\t\t\t\tthis.battle.debug('s4s prankster immunity');\n\t\t\t\t\tthis.battle.add('-immune', target);\n\t\t\t\t\thitResults[i] = move.canContinue || false;\n\t\t\t\t} else {\n\t\t\t\t\thitResults[i] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn hitResults;\n\t\t},\n\t},\n\tpokemon: {\n\t\tinherit: true,\n\t\tignoringAbility() {\n\t\t\t// Check if any active pokemon have the ability Neutralizing Gas\n\t\t\tlet neutralizinggas = false;\n\t\t\tconst genwunRoom = this.battle.field.pseudoWeather['genwunroom'];\n\t\t\tfor (const pokemon of this.battle.getAllActive()) {\n\t\t\t\t// can't use hasAbility because it would lead to infinite recursion\n\t\t\t\tif (pokemon.ability === ('neutralizinggas' as ID) && !pokemon.volatiles['gastroacid'] && !pokemon.volatiles['retro'] &&\n\t\t\t\t\t!pokemon.transformed && !pokemon.abilityState.ending) {\n\t\t\t\t\tneutralizinggas = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst retroSuppression = this.volatiles['retro'] &&\n\t\t\tthis.ability !== ('comatose' as ID) && !this.ability.startsWith('boardpower');\n\n\t\t\treturn !!(\n\t\t\t\t(this.battle.gen >= 5 && !this.isActive) ||\n\t\t\t\t((this.volatiles['gastroacid'] ||\n\t\t\t\t(neutralizinggas && this.ability !== ('neutralizinggas' as ID)) || genwunRoom || retroSuppression) &&\n\t\t\t\t!this.getAbility().isPermanent\n\t\t\t\t)\n\t\t\t);\n\t\t},\n\t\tformeChange(\n\t\t\tspeciesId: string | Species, source: Effect,\n\t\t\tisPermanent?: boolean, message?: string\n\t\t) {\n\t\t\tsource = source || this.battle.effect;\n\t\t\tconst rawSpecies = this.battle.dex.species.get(speciesId);\n\n\t\t\tconst species = this.setSpecies(rawSpecies, source);\n\t\t\tif (!species) return false;\n\n\t\t\tif (this.battle.gen <= 2) return true;\n\n\t\t\t// The species the opponent sees\n\t\t\tconst apparentSpecies =\n\t\t\t\tthis.illusion ? this.illusion.species.name : species.baseSpecies;\n\t\t\tif (isPermanent) {\n\t\t\t\tthis.baseSpecies = rawSpecies;\n\t\t\t\tthis.details = species.name + (this.level === 100 ? '' : ', L' + this.level) +\n\t\t\t\t\t(this.gender === '' ? '' : ', ' + this.gender) + (this.set.shiny ? ', shiny' : '');\n\t\t\t\tthis.battle.add('detailschange', this, (this.illusion || this).details);\n\t\t\t\tif (source.effectType === 'Item') {\n\t\t\t\t\tif (source.zMove) {\n\t\t\t\t\t\tthis.battle.add('-burst', this, apparentSpecies, species.requiredItem);\n\t\t\t\t\t\tthis.moveThisTurnResult = true; // Ultra Burst counts as an action for Truant\n\t\t\t\t\t} else if (source.onPrimal) {\n\t\t\t\t\t\tif (this.illusion) {\n\t\t\t\t\t\t\tthis.ability = '';\n\t\t\t\t\t\t\tthis.battle.add('-primal', this.illusion);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.battle.add('-primal', this);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.battle.add('-mega', this, apparentSpecies, species.requiredItem);\n\t\t\t\t\t\tthis.moveThisTurnResult = true; // Mega Evolution counts as an action for Truant\n\t\t\t\t\t}\n\t\t\t\t} else if (source.effectType === 'Status') {\n\t\t\t\t\t// Shaymin-Sky -> Shaymin\n\t\t\t\t\tthis.battle.add('-formechange', this, species.name, message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (source.effectType === 'Ability') {\n\t\t\t\t\tthis.battle.add('-formechange', this, species.name, message, `[from] ability: ${source.name}`);\n\t\t\t\t} else {\n\t\t\t\t\tthis.battle.add('-formechange', this, this.illusion ? this.illusion.species.name : species.name, message);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isPermanent && !['disguise', 'iceface', 'niceface'].includes(source.id)) {\n\t\t\t\tif (this.illusion) {\n\t\t\t\t\tthis.ability = ''; // Don't allow Illusion to wear off\n\t\t\t\t}\n\t\t\t\tthis.setAbility(species.abilities['0'], null, true);\n\t\t\t\tthis.baseAbility = this.ability;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t\ttransformInto(pokemon, effect) {\n\t\t\tconst species = pokemon.species;\n\t\t\tif (pokemon.fainted || this.illusion || pokemon.illusion || (pokemon.volatiles['substitute'] && this.battle.gen >= 5) ||\n\t\t\t\t(pokemon.transformed && this.battle.gen >= 2) || (this.transformed && this.battle.gen >= 5) ||\n\t\t\t\tspecies.name === 'Eternatus-Eternamax' || (species.baseSpecies === 'Ogerpon' &&\n\t\t\t\t(this.terastallized || pokemon.terastallized)) || pokemon.hasAbility('Artificial')) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.battle.dex.currentMod === 'gen1stadium' && (\n\t\t\t\tspecies.name === 'Ditto' ||\n\t\t\t\t(this.species.name === 'Ditto' && pokemon.moves.includes('transform'))\n\t\t\t)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (!this.setSpecies(species, effect, true)) return false;\n\n\t\t\tthis.transformed = true;\n\t\t\tthis.weighthg = pokemon.weighthg;\n\n\t\t\tconst types = pokemon.getTypes(true, true);\n\t\t\tthis.setType(pokemon.volatiles['roost'] ? pokemon.volatiles['roost'].typeWas : types, true);\n\t\t\tthis.addedType = pokemon.addedType;\n\t\t\tthis.knownType = this.isAlly(pokemon) && pokemon.knownType;\n\t\t\tthis.apparentType = pokemon.apparentType;\n\n\t\t\tlet statName: StatIDExceptHP;\n\t\t\tfor (statName in this.storedStats) {\n\t\t\t\tthis.storedStats[statName] = pokemon.storedStats[statName];\n\t\t\t\tif (this.modifiedStats) this.modifiedStats[statName] = pokemon.modifiedStats![statName]; // Gen 1: Copy modified stats.\n\t\t\t}\n\t\t\tthis.moveSlots = [];\n\t\t\tthis.hpType = (this.battle.gen >= 5 ? this.hpType : pokemon.hpType);\n\t\t\tthis.hpPower = (this.battle.gen >= 5 ? this.hpPower : pokemon.hpPower);\n\t\t\tthis.timesAttacked = pokemon.timesAttacked;\n\t\t\tfor (const moveSlot of pokemon.moveSlots) {\n\t\t\t\tlet moveName = moveSlot.move;\n\t\t\t\tif (moveSlot.id === 'hiddenpower') {\n\t\t\t\t\tmoveName = 'Hidden Power ' + this.hpType;\n\t\t\t\t}\n\t\t\t\tthis.moveSlots.push({\n\t\t\t\t\tmove: moveName,\n\t\t\t\t\tid: moveSlot.id,\n\t\t\t\t\tpp: moveSlot.maxpp === 1 ? 1 : 5,\n\t\t\t\t\tmaxpp: this.battle.gen >= 5 ? (moveSlot.maxpp === 1 ? 1 : 5) : moveSlot.maxpp,\n\t\t\t\t\ttarget: moveSlot.target,\n\t\t\t\t\tdisabled: false,\n\t\t\t\t\tused: false,\n\t\t\t\t\tvirtual: true,\n\t\t\t\t});\n\t\t\t}\n\t\t\tlet boostName: BoostID;\n\t\t\tfor (boostName in pokemon.boosts) {\n\t\t\t\tthis.boosts[boostName] = pokemon.boosts[boostName];\n\t\t\t}\n\t\t\tif (this.battle.gen >= 6) {\n\t\t\t\tconst volatilesToCopy = ['focusenergy', 'gmaxchistrike', 'laserfocus'];\n\t\t\t\tfor (const volatile of volatilesToCopy) {\n\t\t\t\t\tif (pokemon.volatiles[volatile]) {\n\t\t\t\t\t\tthis.addVolatile(volatile);\n\t\t\t\t\t\tif (volatile === 'gmaxchistrike') this.volatiles[volatile].layers = pokemon.volatiles[volatile].layers;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.removeVolatile(volatile);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (effect) {\n\t\t\t\tthis.battle.add('-transform', this, pokemon, '[from] ' + effect.fullname);\n\t\t\t} else {\n\t\t\t\tthis.battle.add('-transform', this, pokemon);\n\t\t\t}\n\t\t\tif (this.terastallized) {\n\t\t\t\tthis.knownType = true;\n\t\t\t\tthis.apparentType = this.terastallized;\n\t\t\t}\n\t\t\tif (this.battle.gen > 2) this.setAbility(pokemon.ability, this, true, true);\n\n\t\t\t// Change formes based on held items (for Transform)\n\t\t\t// Only ever relevant in Generation 4 since Generation 3 didn't have item-based forme changes\n\t\t\tif (this.battle.gen === 4) {\n\t\t\t\tif (this.species.num === 487) {\n\t\t\t\t\t// Giratina formes\n\t\t\t\t\tif (this.species.name === 'Giratina' && this.item === 'griseousorb') {\n\t\t\t\t\t\tthis.formeChange('Giratina-Origin');\n\t\t\t\t\t} else if (this.species.name === 'Giratina-Origin' && this.item !== 'griseousorb') {\n\t\t\t\t\t\tthis.formeChange('Giratina');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.species.num === 493) {\n\t\t\t\t\t// Arceus formes\n\t\t\t\t\tconst item = this.getItem();\n\t\t\t\t\tconst targetForme = (item?.onPlate ? 'Arceus-' + item.onPlate : 'Arceus');\n\t\t\t\t\tif (this.species.name !== targetForme) {\n\t\t\t\t\t\tthis.formeChange(targetForme);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Pokemon transformed into Ogerpon cannot Terastallize\n\t\t\t// restoring their ability to tera after they untransform is handled ELSEWHERE\n\t\t\tif (this.species.baseSpecies === 'Ogerpon' && this.canTerastallize) this.canTerastallize = false;\n\n\t\t\treturn true;\n\t\t},\n\t\tisGrounded(negateImmunity = false) {\n\t\t\tif ('gravity' in this.battle.field.pseudoWeather) return true;\n\t\t\tif ('ingrain' in this.volatiles && this.battle.gen >= 4) return true;\n\t\t\tif ('smackdown' in this.volatiles) return true;\n\t\t\tif ('buried' in this.volatiles) return true;\n\t\t\tconst item = (this.ignoringItem() ? '' : this.item);\n\t\t\tif (item === 'ironball') return true;\n\t\t\t// If a Fire/Flying type uses Burn Up and Roost, it becomes ???/Flying-type, but it's still grounded.\n\t\t\tif (!negateImmunity && this.hasType('Flying') && !('roost' in this.volatiles)) return false;\n\t\t\tif (this.hasAbility(['levitate', 'metagaming', 'noweaknesses', 'acapability']) && !this.battle.suppressingAbility()) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ('magnetrise' in this.volatiles) return false;\n\t\t\tif ('telekinesis' in this.volatiles) return false;\n\t\t\treturn item !== 'airballoon';\n\t\t},\n\t},\n};\n"],
  "mappings": "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",
  "names": []
}
