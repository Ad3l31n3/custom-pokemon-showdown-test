{
  "version": 3,
  "sources": ["../../../../data/mods/clover/rulesets.ts"],
  "sourcesContent": ["import {Tags} from \"../../tags\";\n\nexport const Rulesets: {[k: string]: ModdedFormatData} = {\n\tmultitier: {\n\t\teffectType: 'ValidatorRule',\n\t\tname: 'Multi-Tier',\n\t\tdesc: \"Requires 1 Uber mon, 1 OU mon, 2 UU mons, and 2 RU or NU mons.\",\n\t\tonValidateTeam(team) {\n\t\t\tlet uber = 0;\n\t\t\tlet ou = 0;\n\t\t\tlet uu = 0;\n\t\t\tlet ruOrNu = 0;\n\n\t\t\tteam.forEach((set) => {\n\t\t\t\tconst species = this.dex.species.get(set.species || set.name);\n\t\t\t\tif (species.tier === 'Uber') {\n\t\t\t\t\tuber++;\n\t\t\t\t} else if (species.tier === 'OU' || species.tier === 'UUBL') {\n\t\t\t\t\tou++;\n\t\t\t\t} else if ((species.tier === 'UU') || (species.tier === 'RUBL')) {\n\t\t\t\t\tuu++;\n\t\t\t\t} else if (['RU', 'NUBL', 'NU', 'LC', 'NFE'].includes(species.tier)) {\n\t\t\t\t\truOrNu++;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst errors = [];\n\n\t\t\tif (uber + ou + uu + ruOrNu !== 6) {\n\t\t\t\terrors.push('This format requires teams of 6.');\n\t\t\t}\n\n\t\t\tif (uber !== 1) {\n\t\t\t\terrors.push('This format requires exactly 1 Uber mon per team.');\n\t\t\t}\n\n\t\t\tif (ou !== 1) {\n\t\t\t\terrors.push('This format requires exactly 1 Uber mon per team.');\n\t\t\t}\n\n\t\t\tif (uu !== 2) {\n\t\t\t\terrors.push('This format requires exactly 2 UU mons per team.');\n\t\t\t}\n\n\t\t\tif (ruOrNu !== 2) {\n\t\t\t\terrors.push('This format requires exactly 2 RU or NU mons per team.');\n\t\t\t}\n\n\t\t\treturn errors;\n\t\t},\n\t},\n\tblobbosonly: {\n\t\teffectType: 'ValidatorRule',\n\t\tname: 'Blobbos Only',\n\t\tdesc: \"Only Blobbos and its alternate formes can be used.\",\n\t\tonValidateSet(set) {\n\t\t\tconst species = this.dex.species.get(set.species || set.name);\n\t\t\tif (!Tags.blobbokind.speciesFilter!(species)) {\n\t\t\t\treturn [`${set.name || set.species} is not a forme of Blobbos.`];\n\t\t\t}\n\t\t},\n\t},\n\tuniqueformesclause: {\n\t\teffectType: 'ValidatorRule',\n\t\tname: 'Unique Formes Clause',\n\t\tdesc: 'All formes must be unique.',\n\t\tonValidateTeam(team) {\n\t\t\tconst problems: string[] = [];\n\t\t\tconst ids = new Set();\n\n\t\t\tteam.forEach((set) => {\n\t\t\t\tlet species = this.dex.species.get(set.species || set.name);\n\t\t\t\twhile (species.battleOnly) {\n\t\t\t\t\tif (Array.isArray(species.battleOnly)) {\n\t\t\t\t\t\tspecies = this.dex.species.get(species.battleOnly[0]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tspecies = this.dex.species.get(species.battleOnly);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (ids.has(species.id)) {\n\t\t\t\t\tproblems.push(`Your team has more than 1 ${species.name}.`);\n\t\t\t\t}\n\t\t\t\tids.add(species.id);\n\t\t\t});\n\n\t\t\treturn problems;\n\t\t},\n\t},\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAmB;AAEZ,MAAM,WAA4C;AAAA,EACxD,WAAW;AAAA,IACV,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,MAAM;AAAA,IACN,eAAe,MAAM;AACpB,UAAI,OAAO;AACX,UAAI,KAAK;AACT,UAAI,KAAK;AACT,UAAI,SAAS;AAEb,WAAK,QAAQ,CAAC,QAAQ;AACrB,cAAM,UAAU,KAAK,IAAI,QAAQ,IAAI,IAAI,WAAW,IAAI,IAAI;AAC5D,YAAI,QAAQ,SAAS,QAAQ;AAC5B;AAAA,QACD,WAAW,QAAQ,SAAS,QAAQ,QAAQ,SAAS,QAAQ;AAC5D;AAAA,QACD,WAAY,QAAQ,SAAS,QAAU,QAAQ,SAAS,QAAS;AAChE;AAAA,QACD,WAAW,CAAC,MAAM,QAAQ,MAAM,MAAM,KAAK,EAAE,SAAS,QAAQ,IAAI,GAAG;AACpE;AAAA,QACD;AAAA,MACD,CAAC;AAED,YAAM,SAAS,CAAC;AAEhB,UAAI,OAAO,KAAK,KAAK,WAAW,GAAG;AAClC,eAAO,KAAK,kCAAkC;AAAA,MAC/C;AAEA,UAAI,SAAS,GAAG;AACf,eAAO,KAAK,mDAAmD;AAAA,MAChE;AAEA,UAAI,OAAO,GAAG;AACb,eAAO,KAAK,mDAAmD;AAAA,MAChE;AAEA,UAAI,OAAO,GAAG;AACb,eAAO,KAAK,kDAAkD;AAAA,MAC/D;AAEA,UAAI,WAAW,GAAG;AACjB,eAAO,KAAK,wDAAwD;AAAA,MACrE;AAEA,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EACA,aAAa;AAAA,IACZ,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,MAAM;AAAA,IACN,cAAc,KAAK;AAClB,YAAM,UAAU,KAAK,IAAI,QAAQ,IAAI,IAAI,WAAW,IAAI,IAAI;AAC5D,UAAI,CAAC,iBAAK,WAAW,cAAe,OAAO,GAAG;AAC7C,eAAO,CAAC,GAAG,IAAI,QAAQ,IAAI,oCAAoC;AAAA,MAChE;AAAA,IACD;AAAA,EACD;AAAA,EACA,oBAAoB;AAAA,IACnB,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,MAAM;AAAA,IACN,eAAe,MAAM;AACpB,YAAM,WAAqB,CAAC;AAC5B,YAAM,MAAM,oBAAI,IAAI;AAEpB,WAAK,QAAQ,CAAC,QAAQ;AACrB,YAAI,UAAU,KAAK,IAAI,QAAQ,IAAI,IAAI,WAAW,IAAI,IAAI;AAC1D,eAAO,QAAQ,YAAY;AAC1B,cAAI,MAAM,QAAQ,QAAQ,UAAU,GAAG;AACtC,sBAAU,KAAK,IAAI,QAAQ,IAAI,QAAQ,WAAW,CAAC,CAAC;AAAA,UACrD,OAAO;AACN,sBAAU,KAAK,IAAI,QAAQ,IAAI,QAAQ,UAAU;AAAA,UAClD;AAAA,QACD;AACA,YAAI,IAAI,IAAI,QAAQ,EAAE,GAAG;AACxB,mBAAS,KAAK,6BAA6B,QAAQ,OAAO;AAAA,QAC3D;AACA,YAAI,IAAI,QAAQ,EAAE;AAAA,MACnB,CAAC;AAED,aAAO;AAAA,IACR;AAAA,EACD;AACD;",
  "names": []
}
