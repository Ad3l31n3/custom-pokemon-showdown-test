{
  "version": 3,
  "sources": ["../../../server/chat-plugins/watch-format.ts"],
  "sourcesContent": ["import {FS} from '../../lib';\n\ntype RoomBattleReporterConfig = Record<string, { rooms: Record<string, boolean> }>;\n\nconst roomBattleReporterConfig: RoomBattleReporterConfig = JSON.parse(\n\tFS('config/chat-plugins/room-battles.json').readIfExistsSync() || \"{}\"\n);\n\nconst saveRoomBattleReporterConfig = () => {\n\tFS('config/chat-plugins/room-battles.json').writeUpdate(() => JSON.stringify(roomBattleReporterConfig));\n};\n\nconst addRoom = (formatId: string, roomId: string) => {\n\tconst rooms = roomBattleReporterConfig[formatId] || {rooms: {}};\n\n\trooms.rooms[roomId] = true;\n\n\troomBattleReporterConfig[formatId] = rooms;\n\n\tsaveRoomBattleReporterConfig();\n};\n\nconst removeRoom = (formatId: string, roomId: string) => {\n\tconst rooms = roomBattleReporterConfig[formatId] || {rooms: {}};\n\n\tdelete rooms.rooms[roomId];\n\n\troomBattleReporterConfig[formatId] = rooms;\n\n\tsaveRoomBattleReporterConfig();\n};\n\nconst getRooms = (formatId: string) => {\n\tconst rooms = roomBattleReporterConfig[formatId];\n\n\tif (rooms) {\n\t\treturn Object.keys(rooms.rooms)\n\t\t\t.map((roomId) => Rooms.get(roomId))\n\t\t\t.filter((room) => room !== undefined) as Room[];\n\t}\n\n\treturn [];\n};\n\nexport const commands: Chat.ChatCommands = {\n\twatchformat(target, room) {\n\t\tif (!room) {\n\t\t\tthrow new Chat.ErrorMessage(`Command must be used from a room.`);\n\t\t}\n\n\t\tthis.checkCan('editroom', null, room);\n\n\t\tconst format = Dex.formats.get(target);\n\n\t\tif (!format.exists) {\n\t\t\tthrow new Chat.ErrorMessage(`Format ${format} doesn't exist.`);\n\t\t}\n\n\t\taddRoom(format.id, room.roomid);\n\n\t\treturn this.sendReply(`Successfully added ${format.name} to watched formats.`);\n\t},\n\tunwatchformat(target, room) {\n\t\tif (!room) {\n\t\t\tthrow new Chat.ErrorMessage(`Command must be used from a room.`);\n\t\t}\n\n\t\tthis.checkCan('editroom', null, room);\n\n\t\tconst format = Dex.formats.get(target);\n\n\t\tif (!format) {\n\t\t\tthrow new Chat.ErrorMessage(`Format ${format} doesn't exist.`);\n\t\t}\n\n\t\tremoveRoom(format.id, room.roomid);\n\n\t\treturn this.sendReply(`Successfully removed ${format.name} to watched formats.`);\n\t},\n\tunwatchformathelp: 'watchformathelp',\n\twatchformathelp() {\n\t\tthis.sendReplyBox(\n\t\t\t'<code>/watchformat [format]</code>: adds a format to report battles on in the current room. Requires: #, &<br />' +\n\t\t\t'<code>/unwatchformat [format]</code>: removes a format to report battles on in the current room. Requires: #, &',\n\t\t);\n\t},\n};\n\nconst handledBattles: Record<string, boolean> = {};\n\nexport const handlers: Chat.Handlers = {\n\tonBattleStart(user, room) {\n\t\tconst players = [room.p1, room.p2, room.p3, room.p4]\n\t\t\t.filter((player) => player !== null) as User[];\n\t\tconst reportPlayers = players.map(p => p.getIdentity()).join('|');\n\n\t\tconst battleRoomId = toID(room.format);\n\n\t\tif (handledBattles[battleRoomId]) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst formatRooms = getRooms(battleRoomId);\n\t\tformatRooms.forEach((formatRoom) => {\n\t\t\tformatRoom\n\t\t\t\t.add(`|b|${room.roomid}|${reportPlayers}`)\n\t\t\t\t.update();\n\t\t});\n\n\t\thandledBattles[battleRoomId] = true;\n\t},\n\tonBattleEnd(battle) {\n\t\tdelete handledBattles[battle.roomid];\n\t},\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB;AAIjB,MAAM,2BAAqD,KAAK;AAAA,MAC/D,eAAG,uCAAuC,EAAE,iBAAiB,KAAK;AACnE;AAEA,MAAM,+BAA+B,MAAM;AAC1C,qBAAG,uCAAuC,EAAE,YAAY,MAAM,KAAK,UAAU,wBAAwB,CAAC;AACvG;AAEA,MAAM,UAAU,CAAC,UAAkB,WAAmB;AACrD,QAAM,QAAQ,yBAAyB,QAAQ,KAAK,EAAC,OAAO,CAAC,EAAC;AAE9D,QAAM,MAAM,MAAM,IAAI;AAEtB,2BAAyB,QAAQ,IAAI;AAErC,+BAA6B;AAC9B;AAEA,MAAM,aAAa,CAAC,UAAkB,WAAmB;AACxD,QAAM,QAAQ,yBAAyB,QAAQ,KAAK,EAAC,OAAO,CAAC,EAAC;AAE9D,SAAO,MAAM,MAAM,MAAM;AAEzB,2BAAyB,QAAQ,IAAI;AAErC,+BAA6B;AAC9B;AAEA,MAAM,WAAW,CAAC,aAAqB;AACtC,QAAM,QAAQ,yBAAyB,QAAQ;AAE/C,MAAI,OAAO;AACV,WAAO,OAAO,KAAK,MAAM,KAAK,EAC5B,IAAI,CAAC,WAAW,MAAM,IAAI,MAAM,CAAC,EACjC,OAAO,CAAC,SAAS,SAAS,MAAS;AAAA,EACtC;AAEA,SAAO,CAAC;AACT;AAEO,MAAM,WAA8B;AAAA,EAC1C,YAAY,QAAQ,MAAM;AACzB,QAAI,CAAC,MAAM;AACV,YAAM,IAAI,KAAK,aAAa,mCAAmC;AAAA,IAChE;AAEA,SAAK,SAAS,YAAY,MAAM,IAAI;AAEpC,UAAM,SAAS,IAAI,QAAQ,IAAI,MAAM;AAErC,QAAI,CAAC,OAAO,QAAQ;AACnB,YAAM,IAAI,KAAK,aAAa,UAAU,uBAAuB;AAAA,IAC9D;AAEA,YAAQ,OAAO,IAAI,KAAK,MAAM;AAE9B,WAAO,KAAK,UAAU,sBAAsB,OAAO,0BAA0B;AAAA,EAC9E;AAAA,EACA,cAAc,QAAQ,MAAM;AAC3B,QAAI,CAAC,MAAM;AACV,YAAM,IAAI,KAAK,aAAa,mCAAmC;AAAA,IAChE;AAEA,SAAK,SAAS,YAAY,MAAM,IAAI;AAEpC,UAAM,SAAS,IAAI,QAAQ,IAAI,MAAM;AAErC,QAAI,CAAC,QAAQ;AACZ,YAAM,IAAI,KAAK,aAAa,UAAU,uBAAuB;AAAA,IAC9D;AAEA,eAAW,OAAO,IAAI,KAAK,MAAM;AAEjC,WAAO,KAAK,UAAU,wBAAwB,OAAO,0BAA0B;AAAA,EAChF;AAAA,EACA,mBAAmB;AAAA,EACnB,kBAAkB;AACjB,SAAK;AAAA,MACJ;AAAA,IAED;AAAA,EACD;AACD;AAEA,MAAM,iBAA0C,CAAC;AAE1C,MAAM,WAA0B;AAAA,EACtC,cAAc,MAAM,MAAM;AACzB,UAAM,UAAU,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,EACjD,OAAO,CAAC,WAAW,WAAW,IAAI;AACpC,UAAM,gBAAgB,QAAQ,IAAI,OAAK,EAAE,YAAY,CAAC,EAAE,KAAK,GAAG;AAEhE,UAAM,eAAe,KAAK,KAAK,MAAM;AAErC,QAAI,eAAe,YAAY,GAAG;AACjC;AAAA,IACD;AAEA,UAAM,cAAc,SAAS,YAAY;AACzC,gBAAY,QAAQ,CAAC,eAAe;AACnC,iBACE,IAAI,MAAM,KAAK,UAAU,eAAe,EACxC,OAAO;AAAA,IACV,CAAC;AAED,mBAAe,YAAY,IAAI;AAAA,EAChC;AAAA,EACA,YAAY,QAAQ;AACnB,WAAO,eAAe,OAAO,MAAM;AAAA,EACpC;AACD;",
  "names": []
}
