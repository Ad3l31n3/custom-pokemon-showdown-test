{
  "version": 3,
  "sources": ["../../../server/chat-plugins/badges.ts"],
  "sourcesContent": ["/**\n * Badges plugin.\n * Allows for creating and removing badges as well as granting and removing those bages from users.\n * Written by Mr. Sableye.\n * @author MrSableye\n */\nimport {Badge, UpdateableBadgeAttribute, UserBadge, UserManagedBadge} from '../badges';\nimport {FS, Utils} from '../../lib';\nimport Axios from 'axios';\nimport probe from 'probe-image-size';\nimport {URL} from 'url';\n\nconst nameRegex = /^[A-Za-z0-9 \"'()]+$/;\nconst nameTemplateRegex = /^[A-Za-z0-9 \"'(){}]+$/;\n\nconst ERROR_BADGE_FEATURE_DISABLED = 'The badges feature is currently disabled.';\nconst ERROR_USER_LOCKED = 'You are locked, and so cannot use the badges feature.';\nconst ERROR_USER_NOT_REGISTERED = 'You must be registered to use the badges feature.';\n\nconst ERROR_INVALID_IMAGE = 'Invalid image. Please provide a URL linking to a 16x16 GIF or PNG.';\nconst ERROR_WRITING_IMAGE = 'Unable to write image. Please try again or contact an administrator.';\n\nconst ERROR_NO_BADGE_ID = 'Specify a badge ID.';\nconst ERROR_NO_BADGE_DESCRIPTION = 'Specify a badge description.';\nconst ERROR_INVALID_BADGE_DESCRIPTION = `A badge description can only contain a-z, A-Z, 0-9, ', \", (, ), and spaces.`;\nconst ERROR_INVALID_BADGE_NAME_TEMPLATE = `A badge description can only contain a-z, A-Z, 0-9, ', \", (, ), {, }, and spaces.`;\nconst ERROR_NO_BADGE_MANAGER = 'Specify a manager.';\nconst ERROR_NO_BADGE_IMAGE_URL = 'Specify an image URL.';\nconst ERROR_NO_USER_ID = 'Specify a user.';\nconst ERROR_NO_BADGE_PRIORITY = 'Specify a priority.';\nconst ERROR_NON_NUMERIC_BADGE_PRIORITY = 'Specify a numeric priority.';\nconst ERROR_NON_INTEGER_BADGE_PRIORITY = 'Specify an integer priority.';\nconst ERROR_INVALID_JSON = 'Specify valid JSON.';\n\nfunction toLink(buf: string) {\n\treturn buf.replace(/<a roomid=\"/g, `<a target=\"replace\" href=\"/`);\n}\n\nconst sendPM = (message: string, userId: ID) => {\n\tconst user = Users.get(userId);\n\n\tif (user) {\n\t\tuser.send(`|pm|&|${user.getIdentity()}|${message}`);\n\t}\n};\n\nexport const Badges = new class {\n\t// Permissions\n\tcheckBadgesEnabled() {\n\t\tif (!Config.usesqlitebadges) {\n\t\t\tthrow new Chat.ErrorMessage(ERROR_BADGE_FEATURE_DISABLED);\n\t\t}\n\t}\n\tcheckHasBadgePermission(context: Chat.CommandContext | Chat.PageContext) {\n\t\tBadges.checkBadgesEnabled();\n\t\tcontext.checkCan('badge');\n\t}\n\tcanOverrideBadgeOwnership(user: User) {\n\t\treturn Users.Auth.hasPermission(user, 'badge', null);\n\t}\n\tcheckCanUse(context: Chat.CommandContext | Chat.PageContext) {\n\t\tBadges.checkBadgesEnabled();\n\n\t\tconst user = context.user;\n\t\tif (user.locked || user.namelocked || user.semilocked || user.permalocked) {\n\t\t\tthrow new Chat.ErrorMessage(ERROR_USER_LOCKED);\n\t\t}\n\t\tif (!user.registered) {\n\t\t\tthrow new Chat.ErrorMessage(context.tr(ERROR_USER_NOT_REGISTERED));\n\t\t}\n\t}\n\n\t// User Updates\n\tsortUserBadges(userBadges: UserBadge[]) {\n\t\treturn userBadges.sort((badgeA, badgeB) => {\n\t\t\tconst priorityComparison = badgeA.priority - badgeB.priority;\n\t\t\tif (priorityComparison !== 0) return priorityComparison;\n\t\t\treturn badgeA.create_date - badgeB.create_date;\n\t\t});\n\t}\n\tasync updateUser(userID: string) {\n\t\tconst user = Users.get(userID);\n\t\tif (user) {\n\t\t\tconst badges = Badges.sortUserBadges(await Badges.getVisibleUserBadges(user.id));\n\n\t\t\tuser.badges = badges;\n\t\t\treturn user.badges;\n\t\t}\n\t}\n\tasync updateBadgeForUsers(badgeID: string, requester: User) {\n\t\tconst badgeOwners = await Badges.getBadgeOwners(badgeID, requester, true);\n\n\t\tawait Promise.all(badgeOwners.map(async ({user_id}) => {\n\t\t\tawait Badges.updateUser(user_id);\n\t\t}));\n\t}\n\t// Retrieval\n\tgetBadge(badgeID: string): Promise<Badge | undefined> {\n\t\treturn Chat.Badges.getBadge(badgeID);\n\t}\n\tgetBadges() {\n\t\treturn Chat.Badges.getBadges();\n\t}\n\tgetOwnedBadges(ownerID: string) {\n\t\treturn Chat.Badges.getOwnedBadges(ownerID);\n\t}\n\tgetUserBadges(userID: string) {\n\t\treturn Chat.Badges.getUserBadges(userID);\n\t}\n\tgetVisibleUserBadges(userID: string) {\n\t\treturn Chat.Badges.getVisibleUserBadges(userID);\n\t}\n\tgetBadgeOwners(badgeID: string, requester: User, override = false): Promise<UserBadge[]> {\n\t\treturn Chat.Badges.getBadgeOwners(badgeID, requester.id, override || Badges.canOverrideBadgeOwnership(requester));\n\t}\n\tgetUserManagedBadges(userID: string): Promise<UserManagedBadge[]> {\n\t\treturn Chat.Badges.getUserManagedBadges(userID);\n\t}\n\tasync hasBadge(userID: string, badgeIDs: string[]) {\n\t\tconst badges = await Badges.getUserBadges(userID);\n\t\treturn badges.some((badge) => badgeIDs.includes(badge.badge_id));\n\t}\n\tgetBadgeManagers(badgeID: string): Promise<UserManagedBadge[]> {\n\t\treturn Chat.Badges.getBadgeManagers(badgeID);\n\t}\n\tasync canManageBadge(userID: string, badgeID: string) {\n\t\tconst badge = await Badges.getBadge(badgeID);\n\t\tif (!badge) return false;\n\t\tconst badgeManagers = await Badges.getBadgeManagers(badgeID);\n\t\treturn [badge.owner_id, ...badgeManagers.map((badgeManager) => badgeManager.user_id)].includes(userID);\n\t}\n\t// Modification\n\tcreateBadge(badgeID: string, badgeName: string, managerID: string, filePath: string, badgeNameTemplate?: string) {\n\t\treturn Chat.Badges.createBadge(badgeID, badgeName, managerID, filePath, badgeNameTemplate);\n\t}\n\tasync deleteBadge(badgeID: string, requester: User, override = false) {\n\t\tconst overridePermissions = override || Badges.canOverrideBadgeOwnership(requester);\n\t\tawait Badges.deleteUserBadges(badgeID, requester);\n\t\tawait Chat.Badges.deleteBadge(badgeID, requester.id, overridePermissions);\n\t}\n\tasync updateBadgeAttribute(\n\t\tbadgeID: string,\n\t\tattributeName: UpdateableBadgeAttribute,\n\t\tattributeValue: any,\n\t\trequester: User,\n\t\toverride = false,\n\t) {\n\t\tconst overridePermissions = override || Badges.canOverrideBadgeOwnership(requester);\n\t\tawait Chat.Badges.updateBadgeAttribute(badgeID, attributeName, attributeValue, requester.id, overridePermissions);\n\t\tawait Badges.updateBadgeForUsers(badgeID, requester);\n\t}\n\tasync addBadgeToUser(userID: string, badgeID: string, requester: User, override = false) {\n\t\tconst overridePermissions = override || Badges.canOverrideBadgeOwnership(requester);\n\t\tawait Chat.Badges.addBadgeToUser(userID, badgeID, requester.id, overridePermissions);\n\t\tawait Badges.updateUser(userID);\n\n\t\tconst badge = await Chat.Badges.getBadge(badgeID);\n\t\tif (badge) {\n\t\t\tsendPM(`/html <div class=\"infobox\">You received a badge: ${this.createRawBadgeHtml(badge.badge_name, badge.file_name)}</div>`, toID(userID));\n\t\t}\n\t}\n\tasync removeBadgeFromUser(userID: string, badgeID: string, requester: User, override = false) {\n\t\tconst overridePermissions = override || Badges.canOverrideBadgeOwnership(requester);\n\t\tawait Chat.Badges.removeBadgeFromUser(userID, badgeID, requester.id, overridePermissions);\n\t\tawait Badges.updateUser(userID);\n\t}\n\tasync deleteUserBadges(badgeID: string, requester: User) {\n\t\tawait Chat.Badges.deleteUserBadges(badgeID);\n\t\tawait Badges.updateBadgeForUsers(badgeID, requester);\n\t}\n\tasync toggleBadgeVisibility(userID: string, badgeID: string, isVisible: boolean) {\n\t\tawait Chat.Badges.toggleBadgeVisibility(userID, badgeID, isVisible);\n\t\tawait Badges.updateUser(userID);\n\t}\n\tasync updateBadgePriority(userID: string, badgeID: string, priority: number) {\n\t\tawait Chat.Badges.updateBadgePriority(userID, badgeID, priority);\n\t\tawait Badges.updateUser(userID);\n\t}\n\tasync updateBadgeData(userID: string, badgeID: string, data: any, requester: User, override = false) {\n\t\tconst overridePermissions = override || Badges.canOverrideBadgeOwnership(requester);\n\t\tawait Chat.Badges.updateBadgeData(userID, badgeID, data, requester.id, overridePermissions);\n\t\tawait Badges.updateUser(userID);\n\t}\n\tasync addManagedBadgeToUser(userID: string, badgeID: string, requester: User, override = false) {\n\t\tconst overridePermissions = override || Badges.canOverrideBadgeOwnership(requester);\n\t\tawait Chat.Badges.addManagedBadgeToUser(userID, badgeID, requester.id, overridePermissions);\n\n\t\tconst badge = await Chat.Badges.getBadge(badgeID);\n\t\tif (badge) {\n\t\t\tsendPM(`/html <div class=\"infobox\">You now manage badge: ${this.createRawBadgeHtml(badge.badge_name, badge.file_name)}</div>`, toID(userID));\n\t\t}\n\t}\n\tasync removeManagedBadgeFromUser(userID: string, badgeID: string, requester: User, override = false) {\n\t\tconst overridePermissions = override || Badges.canOverrideBadgeOwnership(requester);\n\t\tawait Chat.Badges.removeManagedBadgeFromUser(userID, badgeID, requester.id, overridePermissions);\n\t}\n\tasync downloadBadgeImage(badgeID: string, imageUrl: string) {\n\t\ttry {\n\t\t\tconst imagebuffer = (await Axios.get(imageUrl, {responseType: 'arraybuffer'})).data;\n\t\t\tconst probeResult = probe.sync(imagebuffer);\n\n\t\t\tif (!probeResult) {\n\t\t\t\tthrow new Chat.ErrorMessage(ERROR_INVALID_IMAGE);\n\t\t\t}\n\n\t\t\tconst {width, height, type} = probeResult;\n\n\t\t\tif (width !== 16 || height !== 16 || !['png', 'gif'].includes(toID(type))) {\n\t\t\t\tthrow new Chat.ErrorMessage(ERROR_INVALID_IMAGE);\n\t\t\t}\n\n\t\t\tconst fileName = `${badgeID}.${type}`;\n\t\t\tawait FS(`./config/badges/${fileName}`).write(imagebuffer);\n\n\t\t\treturn fileName;\n\t\t} catch (error) {\n\t\t\tthrow new Chat.ErrorMessage(ERROR_WRITING_IMAGE);\n\t\t}\n\t}\n\t// HTML\n\tcreateRawBadgeHtml(badgeName: string, badgeFileName: string) {\n\t\treturn `<badge badgename=\"${Utils.escapeHTML(badgeName)}\" badgefilename=\"${Utils.escapeHTML(badgeFileName)}\" />`;\n\t}\n\tcreateUserBadgeHtml(userBadge: UserBadge) {\n\t\treturn Badges.createRawBadgeHtml(userBadge.badge_name, userBadge.file_name) +\n\t\t\t`(${userBadge.badge_id})`;\n\t}\n\tcreateUserBadgeListHtml(title: string, userBadges: UserBadge[]) {\n\t\tlet badgeListString = title === '' ? title : `<span style=\"color:#999999;\">${Utils.escapeHTML(title)}:</span><br />`;\n\n\t\tif (userBadges.length) {\n\t\t\tconst badgeList = userBadges.map(Badges.createUserBadgeHtml);\n\n\t\t\tbadgeListString += badgeList.join(', ');\n\t\t} else {\n\t\t\tbadgeListString += 'No badges found.';\n\t\t}\n\n\t\treturn badgeListString;\n\t}\n\tcreateBadgeHtml(badge: Badge, showOwner: boolean) {\n\t\treturn Badges.createRawBadgeHtml(badge.badge_name, badge.file_name) +\n\t\t\t`(${badge.badge_id})` + (showOwner ? `[Owned by: ${badge.owner_id}]` : '');\n\t}\n\tcreateBadgeListHtml(title: string, badges: Badge[], showOwner = false) {\n\t\tlet badgeListString = title === '' ? title : `<span style=\"color:#999999;\">${Utils.escapeHTML(title)}:</span><br />`;\n\n\t\tif (badges.length) {\n\t\t\tconst badgeList = badges.map((badge) => Badges.createBadgeHtml(badge, showOwner));\n\n\t\t\tbadgeListString += badgeList.join(', ');\n\t\t} else {\n\t\t\tbadgeListString += 'No badges found.';\n\t\t}\n\n\t\treturn badgeListString;\n\t}\n\tcreateBadgeOwnerListHtml(title: string, userBadges: UserBadge[]) {\n\t\tlet badgeListString = title === '' ? title : `<span style=\"color:#999999;\">${Utils.escapeHTML(title)}:</span><br />`;\n\n\t\tif (userBadges.length) {\n\t\t\tconst badgeList = userBadges.map((userBadge) => userBadge.user_id);\n\n\t\t\tbadgeListString += badgeList.join(', ');\n\t\t} else {\n\t\t\tbadgeListString += 'No badges found.';\n\t\t}\n\n\t\treturn badgeListString;\n\t}\n\tcreateBadgeHeaderButtons(currentPage: string) {\n\t\tconst buf = [];\n\t\tconst icons: {[k: string]: string} = {\n\t\t\towned: '<i class=\"fa fa-user\"></i>',\n\t\t\tmanaged: '<i class=\"fa fa-get-pocket\"></i>',\n\t\t};\n\t\tconst titles: {[k: string]: string} = {\n\t\t\towned: 'Owned Badges',\n\t\t\tmanaged: 'Managed Badges',\n\t\t};\n\t\tfor (const page in titles) {\n\t\t\tconst title = titles[page];\n\t\t\tconst icon = icons[page];\n\t\t\tif (page === currentPage) {\n\t\t\t\tbuf.push(`${icon} <strong>${title}</strong>`); // TODO: user.tr(title)\n\t\t\t} else {\n\t\t\t\tbuf.push(`${icon} <a roomid=\"view-badge-${page}\">${title}</a>`); // TODO: user.tr(title)\n\t\t\t}\n\t\t}\n\t\tconst refresh = (\n\t\t\t`<button class=\"button\" name=\"send\" value=\"/j view-badge-${currentPage}\" style=\"float: right\">` +\n\t\t\t` <i class=\"fa fa-refresh\"></i> Refresh</button>` // TODO: user.tr('Refresh')\n\t\t);\n\t\treturn toLink(`<div style=\"line-height:25px\">${buf.join(' / ')}${refresh}</div><hr />`);\n\t}\n\tcreateUserBadgePageElementHtml(userBadge: UserBadge) {\n\t\tconst isHidden = userBadge.is_hidden === 1;\n\t\tlet userBadgePageElementHtml = '<p>';\n\t\tuserBadgePageElementHtml += Badges.createRawBadgeHtml(userBadge.badge_name, userBadge.file_name);\n\t\tuserBadgePageElementHtml += `<strong>${userBadge.badge_name}</strong> <small>[id: ${userBadge.badge_id}, order: ${userBadge.priority}]</small><br />`;\n\t\tuserBadgePageElementHtml += `<button class=\"button${userBadge.is_hidden === 0 ? ' disabled' : ''}\" name=\"send\" `;\n\t\tuserBadgePageElementHtml += `value=\"/badge on ${userBadge.badge_id}\">Show</button> `;\n\t\tuserBadgePageElementHtml += `<button class=\"button${userBadge.is_hidden === 1 ? ' disabled' : ''}\" name=\"send\" `;\n\t\tuserBadgePageElementHtml += `value=\"/badge off ${userBadge.badge_id}\">Hide</button> `;\n\t\tif (!isHidden) {\n\t\t\tuserBadgePageElementHtml += `<button class=\"button\" name=\"send\" `;\n\t\t\tuserBadgePageElementHtml += `value=\"/badge priority ${userBadge.badge_id}, ${userBadge.priority - 1}\">&lt;</button> `;\n\t\t\tuserBadgePageElementHtml += ` <button class=\"button\" name=\"send\" `;\n\t\t\tuserBadgePageElementHtml += `value=\"/badge priority ${userBadge.badge_id}, ${userBadge.priority + 1}\">&gt;</button> `;\n\t\t}\n\t\treturn userBadgePageElementHtml + '</p>';\n\t}\n\tcreateUserBadgePageHtml(userBadges: UserBadge[]) {\n\t\tlet userBadgePageHtml = '<div class=\"pad\">';\n\t\tuserBadgePageHtml += Badges.createBadgeHeaderButtons('owned');\n\n\t\tconst visibleBadges = userBadges.filter((userBadge) => userBadge.is_hidden === 0);\n\t\tuserBadgePageHtml += '<h3>Your Visible Badges</h3>';\n\t\tuserBadgePageHtml += visibleBadges.map(\n\t\t\t(visibleBadge) => Badges.createRawBadgeHtml(visibleBadge.badge_name, visibleBadge.file_name),\n\t\t).join('');\n\t\tuserBadgePageHtml += '<br />';\n\n\t\tuserBadgePageHtml += '<h3>Your Badges</h3>';\n\n\t\tif (userBadges.length) {\n\t\t\tuserBadgePageHtml += userBadges.map(Badges.createUserBadgePageElementHtml).join('');\n\t\t} else {\n\t\t\tuserBadgePageHtml += '<em>you have no badges on Showdown lol</em>';\n\t\t}\n\n\t\tuserBadgePageHtml += '</div>';\n\t\treturn userBadgePageHtml;\n\t}\n\tcreateManagedBadgePageElementHtml(badge: Badge) {\n\t\tlet managedBadgePageElementHtml = Badges.createRawBadgeHtml(badge.badge_name, badge.file_name);\n\t\tmanagedBadgePageElementHtml += `<strong>${badge.badge_name}</strong> <small>[id: ${badge.badge_id}]</small><br />`;\n\t\treturn managedBadgePageElementHtml;\n\t}\n\tcreateManagedBadgePageHtml(ownedBadges: Badge[], managedBadges: Badge[]) {\n\t\tlet managedBadgePageHtml = '<div class=\"pad\">';\n\t\tmanagedBadgePageHtml += Badges.createBadgeHeaderButtons('managed');\n\t\tmanagedBadgePageHtml += '<h3>Your Managed Badges</h3>';\n\n\t\tmanagedBadgePageHtml += '<h4>Directly Owned Badges</h4>';\n\n\t\tif (ownedBadges.length) {\n\t\t\tmanagedBadgePageHtml += ownedBadges.map(Badges.createManagedBadgePageElementHtml).join('');\n\t\t} else {\n\t\t\tmanagedBadgePageHtml += '<em>you directly manage no badges on Showdown lol</em>';\n\t\t}\n\n\t\tmanagedBadgePageHtml += '<h4>Delegated Badges</h4>';\n\n\t\tif (managedBadges.length) {\n\t\t\tmanagedBadgePageHtml += managedBadges.map(Badges.createManagedBadgePageElementHtml).join('');\n\t\t} else {\n\t\t\tmanagedBadgePageHtml += '<em>you have been delegated no badges on Showdown lol</em>';\n\t\t}\n\n\t\tmanagedBadgePageHtml += '</div>';\n\t\treturn managedBadgePageHtml;\n\t}\n};\n\nexport const pages: Chat.PageTable = {\n\tbadge: {\n\t\tasync owned(args, user) {\n\t\t\tif (!user.named) return Rooms.RETRY_AFTER_LOGIN;\n\t\t\tBadges.checkCanUse(this);\n\n\t\t\tthis.title = '[Badges] Owned';\n\n\t\t\tconst userBadges = Badges.sortUserBadges(await Badges.getUserBadges(user.id));\n\n\t\t\treturn Badges.createUserBadgePageHtml(userBadges);\n\t\t},\n\t\tasync managed(args, user) {\n\t\t\tif (!user.named) return Rooms.RETRY_AFTER_LOGIN;\n\t\t\tBadges.checkCanUse(this);\n\n\t\t\tthis.title = '[Badges] Managed';\n\n\t\t\tconst ownedBadges = await Badges.getOwnedBadges(user.id);\n\t\t\tconst managedBadges = await Badges.getUserManagedBadges(user.id);\n\n\t\t\treturn Badges.createManagedBadgePageHtml(ownedBadges, managedBadges);\n\t\t},\n\t},\n};\n\ninterface ChainablePredicate<T, R> {\n\tpredicate: (value: T) => boolean;\n\ttransform: (value: T) => R;\n\terrorMessage: string;\n}\n\nconst applyPredicate = <T, R>(\n\tpredicate: ChainablePredicate<T, R>,\n\tvalue: T,\n): R => {\n\tif (!predicate.predicate(value)) {\n\t\tthrow new Chat.ErrorMessage(predicate.errorMessage);\n\t}\n\n\treturn predicate.transform(value);\n};\n\nconst isNotNullOrUndefined = (arg: any) => (arg !== null) && (arg !== undefined);\nconst identity = <T>(value: T) => value;\n\nconst getBadgeID = (arg: string) => applyPredicate(\n\t{predicate: isNotNullOrUndefined, transform: toID, errorMessage: ERROR_NO_BADGE_ID},\n\targ,\n);\n\nconst getBadgeDescription = (arg: string) => applyPredicate(\n\t{\n\t\tpredicate: (predicateArg) => nameRegex.test(predicateArg),\n\t\ttransform: Utils.escapeHTML,\n\t\terrorMessage: ERROR_INVALID_BADGE_DESCRIPTION,\n\t},\n\tapplyPredicate(\n\t\t{\n\t\t\tpredicate: isNotNullOrUndefined,\n\t\t\ttransform: (transformArg) => transformArg.trim(),\n\t\t\terrorMessage: ERROR_NO_BADGE_DESCRIPTION,\n\t\t},\n\t\targ,\n\t),\n);\n\nconst getBadgeManagerID = (arg: string) => applyPredicate(\n\t{predicate: isNotNullOrUndefined, transform: toID, errorMessage: ERROR_NO_BADGE_MANAGER},\n\targ,\n);\n\nconst validateUrl = (maybeUrl: string) => {\n\ttry {\n\t\tconst url = new URL(maybeUrl);\n\n\t\treturn ['http:', 'https:'].includes(url.protocol);\n\t} catch (err) {\n\t\treturn false;\n\t}\n};\nconst getBadgeImageUrl = (arg: string) => applyPredicate(\n\t{predicate: validateUrl, transform: identity, errorMessage: ERROR_INVALID_IMAGE},\n\tapplyPredicate(\n\t\t{\n\t\t\tpredicate: isNotNullOrUndefined,\n\t\t\ttransform: (transformArg) => transformArg.trim(),\n\t\t\terrorMessage: ERROR_NO_BADGE_IMAGE_URL,\n\t\t},\n\t\targ,\n\t),\n);\n\nconst getUserID = (arg: string) => applyPredicate(\n\t{predicate: isNotNullOrUndefined, transform: toID, errorMessage: ERROR_NO_USER_ID},\n\targ,\n);\n\nconst getBadgePriority = (arg: string) => applyPredicate(\n\t{\n\t\tpredicate: (predicateArg) => Number.isInteger(predicateArg),\n\t\ttransform: identity,\n\t\terrorMessage: ERROR_NON_INTEGER_BADGE_PRIORITY,\n\t},\n\tapplyPredicate(\n\t\t{\n\t\t\tpredicate: (predicateArg) => !Number.isNaN(parseInt(predicateArg)),\n\t\t\ttransform: parseInt,\n\t\t\terrorMessage: ERROR_NON_NUMERIC_BADGE_PRIORITY,\n\t\t},\n\t\tapplyPredicate(\n\t\t\t{\n\t\t\t\tpredicate: isNotNullOrUndefined,\n\t\t\t\ttransform: (transformArg) => transformArg.trim(),\n\t\t\t\terrorMessage: ERROR_NO_BADGE_PRIORITY,\n\t\t\t},\n\t\t\targ,\n\t\t),\n\t),\n);\n\nconst getBadgeNameTemplate = (arg: string) => applyPredicate(\n\t{\n\t\tpredicate: (predicateArg) => nameTemplateRegex.test(predicateArg),\n\t\ttransform: Utils.escapeHTML,\n\t\terrorMessage: ERROR_INVALID_BADGE_NAME_TEMPLATE,\n\t},\n\tapplyPredicate(\n\t\t{\n\t\t\tpredicate: isNotNullOrUndefined,\n\t\t\ttransform: (transformArg) => transformArg.trim(),\n\t\t\terrorMessage: ERROR_NO_BADGE_DESCRIPTION,\n\t\t},\n\t\targ,\n\t),\n);\n\nexport const commands: Chat.ChatCommands = {\n\tbadges: 'badge',\n\tbadge: {\n\t\tasync showall(target, room, user, connection, cmd, message) {\n\t\t\tBadges.checkHasBadgePermission(this);\n\t\t\tthis.runBroadcast();\n\n\t\t\tconst badges = await Badges.getBadges();\n\n\t\t\treturn this.sendReplyBox(Badges.createBadgeListHtml(message, badges, true));\n\t\t},\n\t\tasync showmanaged(target, room, user, connection, cmd, message) {\n\t\t\tBadges.checkCanUse(this);\n\t\t\tthis.runBroadcast();\n\n\t\t\tconst userID = getUserID(target);\n\t\t\tif (userID) {\n\t\t\t\tBadges.checkHasBadgePermission(this);\n\n\t\t\t\tconst ownedBadges = await Badges.getOwnedBadges(userID);\n\t\t\t\tconst managedBadges = await Badges.getUserManagedBadges(userID);\n\n\t\t\t\treturn this.sendReplyBox(Badges.createBadgeListHtml(message, [...ownedBadges, ...managedBadges]));\n\t\t\t} else {\n\t\t\t\tconst ownedBadges = await Badges.getOwnedBadges(user.id);\n\t\t\t\tconst managedBadges = await Badges.getUserManagedBadges(userID);\n\n\t\t\t\treturn this.sendReplyBox(Badges.createBadgeListHtml(message, [...ownedBadges, ...managedBadges]));\n\t\t\t}\n\t\t},\n\t\tasync show(target, room, user, connection, cmd, message) {\n\t\t\tBadges.checkCanUse(this);\n\t\t\tthis.runBroadcast();\n\n\t\t\tconst targetUser = Users.get(getUserID(target));\n\t\t\tif (targetUser) {\n\t\t\t\tconst badges = await Badges.getVisibleUserBadges(targetUser.id);\n\n\t\t\t\treturn this.sendReplyBox(Badges.createUserBadgeListHtml(message, badges));\n\t\t\t} else {\n\t\t\t\tconst badges = this.broadcasting ? await Badges.getVisibleUserBadges(user.id) : await Badges.getUserBadges(user.id);\n\n\t\t\t\treturn this.sendReplyBox(Badges.createUserBadgeListHtml(message, badges));\n\t\t\t}\n\t\t},\n\t\tasync showowners(target, room, user, connection, cmd, message) {\n\t\t\tBadges.checkCanUse(this);\n\t\t\tthis.runBroadcast();\n\n\t\t\tconst id = getBadgeID(target);\n\n\t\t\tconst badges = await Badges.getBadgeOwners(id, user);\n\n\t\t\treturn this.sendReplyBox(Badges.createBadgeOwnerListHtml(message, badges));\n\t\t},\n\t\tnew: 'create',\n\t\tasync create(target, room, user) {\n\t\t\tBadges.checkHasBadgePermission(this);\n\n\t\t\tconst [rawID, rawDescription, rawManagerID, rawImageUrl, rawBadgeNameTemplate] = target.split(',');\n\n\t\t\tconst id = getBadgeID(rawID);\n\t\t\tconst description = getBadgeDescription(rawDescription);\n\t\t\tconst managerID = getBadgeManagerID(rawManagerID);\n\t\t\tconst imageUrl = getBadgeImageUrl(rawImageUrl);\n\t\t\tconst imageFileName = await Badges.downloadBadgeImage(id, imageUrl);\n\t\t\tlet badgeNameTemplate: string | undefined = undefined;\n\n\t\t\tif (rawBadgeNameTemplate) {\n\t\t\t\tbadgeNameTemplate = getBadgeNameTemplate(rawBadgeNameTemplate);\n\t\t\t}\n\n\t\t\tawait Badges.createBadge(id, description, managerID, imageFileName, badgeNameTemplate);\n\n\t\t\tthis.refreshPage('badge-managed');\n\t\t\treturn this.sendReply(`Added Badge '${id}'.`);\n\t\t},\n\t\tasync delete(target, room, user) {\n\t\t\tBadges.checkHasBadgePermission(this);\n\n\t\t\tconst id = getBadgeID(target);\n\n\t\t\tawait Badges.deleteBadge(id, user);\n\n\t\t\tthis.refreshPage('badge-managed');\n\t\t\treturn this.sendReply(`Deleted Badge '${id}'.`);\n\t\t},\n\t\tset: {\n\t\t\tasync owner(target, room, user) {\n\t\t\t\tconst [rawID, rawManagerID] = target.split(',').map(toID);\n\n\t\t\t\tconst id = getBadgeID(rawID);\n\t\t\t\tconst managerID = getBadgeManagerID(rawManagerID);\n\n\t\t\t\tawait Badges.updateBadgeAttribute(id, 'owner_id', managerID, user);\n\n\t\t\t\tthis.refreshPage('badge-managed');\n\t\t\t\treturn this.sendReply(`Updated manager of Badge '${id}' to User '${managerID}'.`);\n\t\t\t},\n\t\t\tdesc: 'name',\n\t\t\tdescription: 'name',\n\t\t\tasync name(target, room, user) {\n\t\t\t\tconst [rawID, rawDescription] = target.split(',');\n\n\t\t\t\tconst id = getBadgeID(rawID);\n\t\t\t\tconst description = getBadgeDescription(rawDescription);\n\n\t\t\t\tawait Badges.updateBadgeAttribute(id, 'badge_name', description, user);\n\n\t\t\t\tthis.refreshPage('badge-managed');\n\t\t\t\treturn this.sendReply(`Updated description of Badge '${id}' to '${description}'.`);\n\t\t\t},\n\t\t\tasync image(target, room, user) {\n\t\t\t\tconst [rawID, rawImageUrl] = target.split(',');\n\n\t\t\t\tconst id = getBadgeID(rawID);\n\t\t\t\tconst imageUrl = getBadgeImageUrl(rawImageUrl);\n\t\t\t\tconst imageFileName = await Badges.downloadBadgeImage(id, imageUrl);\n\n\t\t\t\tawait Badges.updateBadgeAttribute(id, 'file_name', imageFileName, user);\n\n\t\t\t\tthis.refreshPage('badge-managed');\n\t\t\t\treturn this.sendReply(`Updated image of Badge '${id}' to '${imageUrl}'.`);\n\t\t\t},\n\t\t\tasync template(target, room, user) {\n\t\t\t\tconst [rawID, rawBadgeNameTemplate] = target.split(',');\n\n\t\t\t\tconst id = getBadgeID(rawID);\n\t\t\t\tconst badgeNameTemplate = getBadgeNameTemplate(rawBadgeNameTemplate);\n\n\t\t\t\tawait Badges.updateBadgeAttribute(id, 'badge_name_template', badgeNameTemplate, user);\n\n\t\t\t\tthis.refreshPage('badge-managed');\n\t\t\t\treturn this.sendReply(`Updated template of Badge '${id}' to '${badgeNameTemplate}'.`);\n\t\t\t},\n\t\t},\n\t\tgrant: 'add',\n\t\tasync add(target, room, user) {\n\t\t\tBadges.checkCanUse(this);\n\t\t\tconst [rawUserID, rawBadgeID] = target.split(',').map(toID);\n\n\t\t\tconst userID = getUserID(rawUserID);\n\t\t\tconst badgeID = getBadgeID(rawBadgeID);\n\n\t\t\tawait Badges.addBadgeToUser(userID, badgeID, user);\n\n\t\t\treturn this.sendReply(`Granted Badge '${badgeID}' to User '${userID}'.`);\n\t\t},\n\t\trevoke: 'remove',\n\t\tasync remove(target, room, user) {\n\t\t\tBadges.checkCanUse(this);\n\t\t\tconst [rawUserID, rawBadgeID] = target.split(',');\n\n\t\t\tconst userID = getUserID(rawUserID);\n\t\t\tconst badgeID = getBadgeID(rawBadgeID);\n\n\t\t\tawait Badges.removeBadgeFromUser(userID, badgeID, user);\n\n\t\t\treturn this.sendReply(`Removed Badge '${badgeID}' from User '${userID}'.`);\n\t\t},\n\t\tasync data(target, room, user) {\n\t\t\tBadges.checkCanUse(this);\n\n\t\t\tconst [rawUserID, rawBadgeID, ...rawData] = target.split(',');\n\t\t\tconst userID = getUserID(rawUserID);\n\t\t\tconst badgeID = getBadgeID(rawBadgeID);\n\n\t\t\ttry {\n\t\t\t\tconst data = JSON.parse(rawData.join(','));\n\n\t\t\t\tawait Badges.updateBadgeData(userID, badgeID, data, user);\n\n\t\t\t\treturn this.sendReply(`Updated Badge '${badgeID}' data fom User '${userID}'.`);\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Chat.ErrorMessage(ERROR_INVALID_JSON);\n\t\t\t}\n\t\t},\n\t\tenable: 'on',\n\t\tasync on(target, room, user) {\n\t\t\tBadges.checkCanUse(this);\n\n\t\t\tconst id = getBadgeID(target);\n\n\t\t\tawait Badges.toggleBadgeVisibility(user.id, id, true);\n\n\t\t\tthis.refreshPage('badge-owned');\n\t\t\treturn this.sendReply(`Showing Badge '${id}'.`);\n\t\t},\n\t\tdisable: 'off',\n\t\tasync off(target, room, user) {\n\t\t\tBadges.checkCanUse(this);\n\n\t\t\tconst id = getBadgeID(target);\n\n\t\t\tawait Badges.toggleBadgeVisibility(user.id, id, false);\n\n\t\t\tthis.refreshPage('badge-owned');\n\t\t\treturn this.sendReply(`Hiding Badge '${id}'.`);\n\t\t},\n\t\tpriority: 'order',\n\t\tasync order(target, room, user) {\n\t\t\tBadges.checkCanUse(this);\n\n\t\t\tconst [rawID, rawPriority] = target.split(',');\n\t\t\tconst id = getBadgeID(rawID);\n\t\t\tconst priority = getBadgePriority(rawPriority);\n\n\t\t\tawait Badges.updateBadgePriority(user.id, id, priority);\n\n\t\t\tthis.refreshPage('badge-owned');\n\t\t\treturn this.sendReply(`Set Badge '${id}' priority to '${priority}'.`);\n\t\t},\n\t\tmanage: 'manager',\n\t\tmanager: {\n\t\t\tasync list(target) {\n\t\t\t\tBadges.checkCanUse(this);\n\t\t\t\tconst badgeID = getBadgeID(target);\n\t\t\t\tconst badgeManagers = await Badges.getBadgeManagers(badgeID);\n\n\t\t\t\treturn this.sendReply(`Managers: ${badgeManagers.map((badgeManager) => badgeManager.user_id).join(', ')}`);\n\t\t\t},\n\t\t\tgrant: 'add',\n\t\t\tasync add(target, room, user) {\n\t\t\t\tBadges.checkCanUse(this);\n\t\t\t\tconst [rawUserID, rawBadgeID] = target.split(',').map(toID);\n\n\t\t\t\tconst userID = getUserID(rawUserID);\n\t\t\t\tconst badgeID = getBadgeID(rawBadgeID);\n\n\t\t\t\tawait Badges.addManagedBadgeToUser(userID, badgeID, user);\n\n\t\t\t\treturn this.sendReply(`Granted Management of Badge '${badgeID}' to User '${userID}'.`);\n\t\t\t},\n\t\t\trevoke: 'remove',\n\t\t\tasync remove(target, room, user) {\n\t\t\t\tBadges.checkCanUse(this);\n\t\t\t\tconst [rawUserID, rawBadgeID] = target.split(',');\n\n\t\t\t\tconst userID = getUserID(rawUserID);\n\t\t\t\tconst badgeID = getBadgeID(rawBadgeID);\n\n\t\t\t\tawait Badges.removeManagedBadgeFromUser(userID, badgeID, user);\n\n\t\t\t\treturn this.sendReply(`Removed Management of Badge '${badgeID}' from User '${userID}'.`);\n\t\t\t},\n\t\t},\n\t\t'': 'view',\n\t\tview() {\n\t\t\tBadges.checkCanUse(this);\n\n\t\t\treturn this.parse(`/j view-badge-owned`);\n\t\t},\n\t},\n\tbadgehelp() {\n\t\tthis.sendReplyBox(\n\t\t\t`<code>/badge view</code>: opens the badge page<br />` +\n\t\t\t`<code>/badge showall</code>: shows all badges. Requires: &<br />` +\n\t\t\t`<code>/badge showmanaged</code>: shows all badges you manage<br />` +\n\t\t\t`<code>/badge showmanaged</code>: shows all badges a given user manages. Requires: &<br />` +\n\t\t\t`<code>/badge showowned [user]</code>: shows all badges the given user owns. Requires: &<br />` +\n\t\t\t`<code>/badge showowners [badge id]</code>: shows all owners of a badges. Requires: & or ownership<br />` +\n\t\t\t`<code>/badge show</code>: shows all badges you've been granted<br />` +\n\t\t\t`<code>/badge show [user]</code>: shows all badges the given user has been granted<br />` +\n\t\t\t`<code>/badge create [badge id], [badge name], [owner], [image url]</code>: creates a new badge with the given parameters. Requires: &<br />` +\n\t\t\t`<code>/badge set name [badge id], [badge name]</code>: updates a badge with the given name. Requires: & or ownership<br />` +\n\t\t\t`<code>/badge set owner [badge id], [owner],</code>: updates a badge with the given owner. Requires: & or ownership<br />` +\n\t\t\t`<code>/badge set image [badge id], [image url]</code>: updates a badge with the given image. Requires: & or ownership<br />` +\n\t\t\t`<code>/badge set template [badge id], [image url]</code>: updates a badge with the given image. Requires: & or ownership<br />` +\n\t\t\t`<code>/badge delete [badge id]</code>: deletes a badge. Requires: & or ownership<br />` +\n\t\t\t`<code>/badge add [user], [badge id]</code>: grants a user a badge. Requires: & or ownership<br />` +\n\t\t\t`<code>/badge remove [user], [badge id]</code>: revokes a badge from a user. Requires: & or ownership<br />` +\n\t\t\t`<code>/badge data [user], [badge id], [data]</code>: sets badge data for a user. Requires: & or ownership<br />` +\n\t\t\t`<code>/badge on [badge id]</code>: displays a badge you own<br />` +\n\t\t\t`<code>/badge off [badge id]</code>: hides a badge you own<br />` +\n\t\t\t`<code>/badge order [badge id], [priority]</code>: sets the order of a badge you own<br />`\n\t\t);\n\t},\n};\n\nexport const loginfilter: Chat.LoginFilter = user => {\n\tif (!Config.usesqlitebadges) {\n\t\treturn;\n\t}\n\n\tvoid Badges.updateUser(user.id);\n};\n"],
  "mappings": "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",
  "names": ["Axios", "probe"]
}
