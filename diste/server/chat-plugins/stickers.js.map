{
  "version": 3,
  "sources": ["../../../server/chat-plugins/stickers.ts"],
  "sourcesContent": ["/* eslint max-len: [\"error\", 240] */\n\nimport {FS} from '../../lib';\nimport {Punishments} from '../punishments';\nimport {downloadImageWithVerification} from '../../lib/image';\nimport { checkEmojiLevel } from './emojis';\n\nconst MAX_STICKER_SIZE = 160;\nconst STICKER_SIZE = 64;\nconst ERROR_NO_STICKER_NAME = 'Specify an sticker name.';\nconst ERROR_NO_STICKER_URL = 'Specify an sticker URL.';\nconst COOLDOWN = 10 * 1000;\n\nexport interface Sticker {\n\tfilename: string;\n\twidth: number;\n\theight: number;\n}\n\ntype Stickers = Record<string, Sticker>;\n\nexport const stickers: Stickers = JSON.parse(\n\tFS('config/chat-plugins/stickers.json').readIfExistsSync() || \"{}\"\n);\n\nconst saveStickers = () => {\n\tFS('config/chat-plugins/stickers.json').writeUpdate(() => JSON.stringify(stickers));\n};\n\nconst addOrUpdateSticker = (name: string, sticker: Sticker) => {\n\tstickers[name] = sticker;\n\tsaveStickers();\n};\n\nconst deleteSticker = (name: string) => {\n\tdelete stickers[name];\n\tsaveStickers();\n};\n\nconst cooldowns: Record<string, number> = {};\n\nconst checkCooldown = (userID: ID) => {\n\tconst now = Date.now();\n\tconst activeCooldown = cooldowns[userID];\n\n\tif (activeCooldown && ((now - activeCooldown) < COOLDOWN)) {\n\t\treturn false;\n\t}\n\n\tcooldowns[userID] = now;\n\treturn true;\n};\n\nconst toAlphaNumeric = (text: string) => ('' + text).replace(/[^A-Za-z0-9]+/g, '');\n\nexport const createStickerHtml = (\n\tname: string,\n\tsticker: Sticker,\n\tpath: string = ''\n) => `<img src=\"https://clover.weedl.es:8443/stickers/${path}${sticker.filename}\" title=\"/gif ${name}\" height=\"${sticker.height}\" width=\"${sticker.width}\">`;\n\nexport const downloadSticker = async (stickerName: string, imageUrl: string, path: string = './config/stickers'): Promise<Sticker> => {\n\tconst result = await downloadImageWithVerification(imageUrl, {\n\t\tvalidTypes: ['png', 'gif'],\n\t\tenforceRatio: { min: { width: 1, height: 2 }, max: { width: 2, height: 1 } },\n\t\tminDimensions: {width: STICKER_SIZE, height: STICKER_SIZE},\n\t\tmaxDimensions: {width: MAX_STICKER_SIZE, height: MAX_STICKER_SIZE},\n\t\tfileSize: 1000000,\n\t});\n\n\tif ('error' in result) {\n\t\tthrow new Chat.ErrorMessage(result.error);\n\t}\n\n\tconst fileName = `${stickerName}.${result.type}`;\n\tawait FS(`${path}/${fileName}`).write(result.image);\n\n\treturn { filename: fileName, width: result.width, height: result.height };\n};\n\nexport const commands: Chat.ChatCommands = {\n\tgif: 'sticker',\n\tsticker(target, room, user) {\n\t\tif (Punishments.hasPunishType(user.id, 'EMOJIBAN')) {\n\t\t\tthrow new Chat.ErrorMessage('You are banned from using stickers.');\n\t\t}\n\n\t\tif (room && !checkEmojiLevel(user, room)) {\n\t\t\tthrow new Chat.ErrorMessage('You cannot use stickers in this room.');\n\t\t}\n\n\t\tthis.checkChat();\n\n\t\tconst stickerName = target.trim();\n\t\tconst sticker = stickers[stickerName];\n\n\t\tif (!sticker) throw new Chat.ErrorMessage(`No such sticker ${stickerName} exists.`);\n\n\t\tif (!checkCooldown(user.id)) {\n\t\t\tthrow new Chat.ErrorMessage('You are using stickers too quickly.');\n\t\t}\n\n\t\treturn `/html ${createStickerHtml(stickerName, sticker)}`;\n\t},\n\tmanagegif: 'managesticker',\n\tmanagesticker: {\n\t\tlist() {\n\t\t\tthis.runBroadcast();\n\t\t\treturn this.sendReplyBox(`<b><u>Stickers</u> <i>(hover for name, try <code>/gif STICKERNAME</code>)</i></b><br />${Object.entries(stickers).map(([stickerName, stickerUrl]) => createStickerHtml(stickerName, stickerUrl)).join(' ')}`);\n\t\t},\n\t\tupdate: 'add',\n\t\tasync add(target, room, user) {\n\t\t\tthis.checkCan('emoji');\n\t\t\tconst [rawStickerName, stickerUrl] = target.split(',').map((part) => part.trim());\n\n\t\t\tif (!rawStickerName) {\n\t\t\t\treturn this.errorReply(ERROR_NO_STICKER_NAME);\n\t\t\t}\n\t\t\tconst stickerName = toAlphaNumeric(rawStickerName);\n\n\t\t\tif (!stickerUrl) {\n\t\t\t\treturn this.errorReply(ERROR_NO_STICKER_URL);\n\t\t\t}\n\n\t\t\tconst sticker = await downloadSticker(stickerName, stickerUrl);\n\n\t\t\taddOrUpdateSticker(stickerName, sticker);\n\n\t\t\tthis.addGlobalModAction(`${user.name} added sticker ${stickerName}`);\n\t\t\treturn this.sendReplyBox(`Added: ${createStickerHtml(stickerName, sticker)}`);\n\t\t},\n\t\tremove(target, room, user) {\n\t\t\tthis.checkCan('emoji');\n\t\t\tconst stickerName = toAlphaNumeric(target);\n\n\t\t\tif (!stickers[stickerName]) {\n\t\t\t\treturn this.sendReplyBox(`No such sticker ${stickerName} exists.`);\n\t\t\t}\n\n\t\t\tdeleteSticker(stickerName);\n\n\t\t\tthis.addGlobalModAction(`${user.name} deleted sticker ${stickerName}`);\n\t\t\treturn this.sendReply(`Deleted ${stickerName}`);\n\t\t},\n\t},\n\tmanagestickerhelp() {\n\t\tthis.runBroadcast();\n\t\treturn this.sendReplyBox([\n\t\t\t`<code>/managesticker list</code> - Lists all available stickers.`,\n\t\t\t`<code>/managesticker add [name], [image url]</code> - Adds or updates an sticker. Requires: &`,\n\t\t\t`<code>/maangesticker remove [name]</code> - Removes an sticker. Requires: &`,\n\t\t].join('<br />'));\n\t},\n};\n"],
  "mappings": "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",
  "names": []
}
